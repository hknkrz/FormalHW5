        -:    0:Source:/usr/include/c++/10/bits/stl_tree.h
        -:    0:Graph:/home/hkn_krz/formalHW5/cmake-build-debug-coverage/CMakeFiles/formal.dir/Tests.cpp.gcno
        -:    0:Data:/home/hkn_krz/formalHW5/cmake-build-debug-coverage/CMakeFiles/formal.dir/Tests.cpp.gcda
        -:    0:Runs:1
        -:    1:// RB tree implementation -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2020 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1996,1997
        -:   28: * Silicon Graphics Computer Systems, Inc.
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Silicon Graphics makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1994
        -:   40: * Hewlett-Packard Company
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: *
        -:   50: *
        -:   51: */
        -:   52:
        -:   53:/** @file bits/stl_tree.h
        -:   54: *  This is an internal header file, included by other library headers.
        -:   55: *  Do not attempt to use it directly. @headername{map,set}
        -:   56: */
        -:   57:
        -:   58:#ifndef _STL_TREE_H
        -:   59:#define _STL_TREE_H 1
        -:   60:
        -:   61:#pragma GCC system_header
        -:   62:
        -:   63:#include <bits/stl_algobase.h>
        -:   64:#include <bits/allocator.h>
        -:   65:#include <bits/stl_function.h>
        -:   66:#include <bits/cpp_type_traits.h>
        -:   67:#include <ext/alloc_traits.h>
        -:   68:#if __cplusplus >= 201103L
        -:   69:# include <ext/aligned_buffer.h>
        -:   70:#endif
        -:   71:#if __cplusplus > 201402L
        -:   72:# include <bits/node_handle.h>
        -:   73:#endif
        -:   74:
        -:   75:namespace std _GLIBCXX_VISIBILITY(default)
        -:   76:{
        -:   77:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   78:
        -:   79:#if __cplusplus > 201103L
        -:   80:# define __cpp_lib_generic_associative_lookup 201304
        -:   81:#endif
        -:   82:
        -:   83:  // Red-black tree class, designed for use in implementing STL
        -:   84:  // associative containers (set, multiset, map, and multimap). The
        -:   85:  // insertion and deletion algorithms are based on those in Cormen,
        -:   86:  // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
        -:   87:  // 1990), except that
        -:   88:  //
        -:   89:  // (1) the header cell is maintained with links not only to the root
        -:   90:  // but also to the leftmost node of the tree, to enable constant
        -:   91:  // time begin(), and to the rightmost node of the tree, to enable
        -:   92:  // linear time performance when used with the generic set algorithms
        -:   93:  // (set_union, etc.)
        -:   94:  //
        -:   95:  // (2) when a node being deleted has two children its successor node
        -:   96:  // is relinked into its place, rather than copied, so that the only
        -:   97:  // iterators invalidated are those referring to the deleted node.
        -:   98:
        -:   99:  enum _Rb_tree_color { _S_red = false, _S_black = true };
        -:  100:
        -:  101:  struct _Rb_tree_node_base
        -:  102:  {
        -:  103:    typedef _Rb_tree_node_base* _Base_ptr;
        -:  104:    typedef const _Rb_tree_node_base* _Const_Base_ptr;
        -:  105:
        -:  106:    _Rb_tree_color	_M_color;
        -:  107:    _Base_ptr		_M_parent;
        -:  108:    _Base_ptr		_M_left;
        -:  109:    _Base_ptr		_M_right;
        -:  110:
        -:  111:    static _Base_ptr
function _ZNSt18_Rb_tree_node_base10_S_minimumEPS_ called 412 returned 100% blocks executed 100%
      425:  112:    _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  113:    {
      425:  114:      while (__x->_M_left != 0) __x = __x->_M_left;
      425:  114-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 412
       13:  114-block  1
      412:  115:      return __x;
      412:  115-block  0
        -:  116:    }
        -:  117:
        -:  118:    static _Const_Base_ptr
        -:  119:    _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  120:    {
        -:  121:      while (__x->_M_left != 0) __x = __x->_M_left;
        -:  122:      return __x;
        -:  123:    }
        -:  124:
        -:  125:    static _Base_ptr
function _ZNSt18_Rb_tree_node_base10_S_maximumEPS_ called 412 returned 100% blocks executed 100%
      428:  126:    _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  127:    {
      428:  128:      while (__x->_M_right != 0) __x = __x->_M_right;
      428:  128-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 412
       16:  128-block  1
      412:  129:      return __x;
      412:  129-block  0
        -:  130:    }
        -:  131:
        -:  132:    static _Const_Base_ptr
        -:  133:    _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  134:    {
        -:  135:      while (__x->_M_right != 0) __x = __x->_M_right;
        -:  136:      return __x;
        -:  137:    }
        -:  138:  };
        -:  139:
        -:  140:  // Helper type offering value initialization guarantee on the compare functor.
        -:  141:  template<typename _Key_compare>
        -:  142:    struct _Rb_tree_key_compare
        -:  143:    {
        -:  144:      _Key_compare		_M_key_compare;
        -:  145:
      571:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
      571:  150:      { }
------------------
_ZNSt20_Rb_tree_key_compareISt4lessIcEEC2Ev:
function _ZNSt20_Rb_tree_key_compareISt4lessIcEEC2Ev called 57 returned 100% blocks executed 100%
       57:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
       57:  150:      { }
------------------
_ZNSt20_Rb_tree_key_compareISt4lessISt3setIiS0_IiESaIiEEEEC2Ev:
function _ZNSt20_Rb_tree_key_compareISt4lessISt3setIiS0_IiESaIiEEEEC2Ev called 7 returned 100% blocks executed 100%
        7:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
        7:  150:      { }
------------------
_ZNSt20_Rb_tree_key_compareISt4lessIiEEC2Ev:
function _ZNSt20_Rb_tree_key_compareISt4lessIiEEC2Ev called 507 returned 100% blocks executed 100%
      507:  146:      _Rb_tree_key_compare()
        -:  147:      _GLIBCXX_NOEXCEPT_IF(
        -:  148:	is_nothrow_default_constructible<_Key_compare>::value)
        -:  149:      : _M_key_compare()
      507:  150:      { }
------------------
        -:  151:
function _ZNSt20_Rb_tree_key_compareISt4lessIiEEC2ERKS1_ called 359 returned 100% blocks executed 100%
      359:  152:      _Rb_tree_key_compare(const _Key_compare& __comp)
        -:  153:      : _M_key_compare(__comp)
      359:  154:      { }
        -:  155:
        -:  156:#if __cplusplus >= 201103L
        -:  157:      // Copy constructor added for consistency with C++98 mode.
        -:  158:      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
        -:  159:
function _ZNSt20_Rb_tree_key_compareISt4lessIiEEC2EOS2_ called 7 returned 100% blocks executed 100%
        7:  160:      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
        -:  161:	noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
        -:  162:      : _M_key_compare(__x._M_key_compare)
        7:  163:      { }
        -:  164:#endif
        -:  165:    };
        -:  166:
        -:  167:  // Helper type to manage default initialization of node count and header.
        -:  168:  struct _Rb_tree_header
        -:  169:  {
        -:  170:    _Rb_tree_node_base	_M_header;
        -:  171:    size_t		_M_node_count; // Keeps track of size of tree.
        -:  172:
function _ZNSt15_Rb_tree_headerC2Ev called 930 returned 100% blocks executed 100%
      930:  173:    _Rb_tree_header() _GLIBCXX_NOEXCEPT
      930:  174:    {
      930:  175:      _M_header._M_color = _S_red;
      930:  176:      _M_reset();
      930:  176-block  0
call    0 returned 930
      930:  177:    }
        -:  178:
        -:  179:#if __cplusplus >= 201103L
function _ZNSt15_Rb_tree_headerC2EOS_ called 7 returned 100% blocks executed 75%
        7:  180:    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
        7:  181:    {
        7:  182:      if (__x._M_header._M_parent != nullptr)
        7:  182-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:  183:	_M_move_data(__x);
        7:  183-block  0
call    0 returned 7
        -:  184:      else
        -:  185:	{
    #####:  186:	  _M_header._M_color = _S_red;
    #####:  187:	  _M_reset();
    %%%%%:  187-block  0
call    0 never executed
        -:  188:	}
        7:  189:    }
        -:  190:#endif
        -:  191:
        -:  192:    void
function _ZNSt15_Rb_tree_header12_M_move_dataERS_ called 7 returned 100% blocks executed 100%
        7:  193:    _M_move_data(_Rb_tree_header& __from)
        -:  194:    {
        7:  195:      _M_header._M_color = __from._M_header._M_color;
        7:  196:      _M_header._M_parent = __from._M_header._M_parent;
        7:  197:      _M_header._M_left = __from._M_header._M_left;
        7:  198:      _M_header._M_right = __from._M_header._M_right;
        7:  199:      _M_header._M_parent->_M_parent = &_M_header;
        7:  200:      _M_node_count = __from._M_node_count;
        -:  201:
        7:  202:      __from._M_reset();
        7:  202-block  0
call    0 returned 7
        7:  203:    }
        -:  204:
        -:  205:    void
function _ZNSt15_Rb_tree_header8_M_resetEv called 1015 returned 100% blocks executed 100%
     1015:  206:    _M_reset()
        -:  207:    {
     1015:  208:      _M_header._M_parent = 0;
     1015:  209:      _M_header._M_left = &_M_header;
     1015:  210:      _M_header._M_right = &_M_header;
     1015:  211:      _M_node_count = 0;
     1015:  212:    }
        -:  213:  };
        -:  214:
        -:  215:  template<typename _Val>
        -:  216:    struct _Rb_tree_node : public _Rb_tree_node_base
        -:  217:    {
        -:  218:      typedef _Rb_tree_node<_Val>* _Link_type;
        -:  219:
        -:  220:#if __cplusplus < 201103L
        -:  221:      _Val _M_value_field;
        -:  222:
        -:  223:      _Val*
        -:  224:      _M_valptr()
        -:  225:      { return std::__addressof(_M_value_field); }
        -:  226:
        -:  227:      const _Val*
        -:  228:      _M_valptr() const
        -:  229:      { return std::__addressof(_M_value_field); }
        -:  230:#else
        -:  231:      __gnu_cxx::__aligned_membuf<_Val> _M_storage;
        -:  232:
        -:  233:      _Val*
    10941:  234:      _M_valptr()
    10941:  235:      { return _M_storage._M_ptr(); }
------------------
_ZNSt13_Rb_tree_nodeIiE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeIiE9_M_valptrEv called 1405 returned 100% blocks executed 100%
     1405:  234:      _M_valptr()
     1405:  235:      { return _M_storage._M_ptr(); }
     1405:  235-block  0
call    0 returned 1405
------------------
_ZNSt13_Rb_tree_nodeISt4pairIKcbEE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeISt4pairIKcbEE9_M_valptrEv called 1052 returned 100% blocks executed 100%
     1052:  234:      _M_valptr()
     1052:  235:      { return _M_storage._M_ptr(); }
     1052:  235-block  0
call    0 returned 1052
------------------
_ZNSt13_Rb_tree_nodeISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE9_M_valptrEv called 1150 returned 100% blocks executed 100%
     1150:  234:      _M_valptr()
     1150:  235:      { return _M_storage._M_ptr(); }
     1150:  235-block  0
call    0 returned 1150
------------------
_ZNSt13_Rb_tree_nodeISt4pairIKiS0_IciEEE9_M_valptrEv:
function _ZNSt13_Rb_tree_nodeISt4pairIKiS0_IciEEE9_M_valptrEv called 7334 returned 100% blocks executed 100%
     7334:  234:      _M_valptr()
     7334:  235:      { return _M_storage._M_ptr(); }
     7334:  235-block  0
call    0 returned 7334
------------------
        -:  236:
        -:  237:      const _Val*
    35312:  238:      _M_valptr() const
    35312:  239:      { return _M_storage._M_ptr(); }
------------------
_ZNKSt13_Rb_tree_nodeISt4pairIKcbEE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeISt4pairIKcbEE9_M_valptrEv called 1109 returned 100% blocks executed 100%
     1109:  238:      _M_valptr() const
     1109:  239:      { return _M_storage._M_ptr(); }
     1109:  239-block  0
call    0 returned 1109
------------------
_ZNKSt13_Rb_tree_nodeISt4pairIKiS0_IciEEE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeISt4pairIKiS0_IciEEE9_M_valptrEv called 16955 returned 100% blocks executed 100%
    16955:  238:      _M_valptr() const
    16955:  239:      { return _M_storage._M_ptr(); }
    16955:  239-block  0
call    0 returned 16955
------------------
_ZNKSt13_Rb_tree_nodeISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE9_M_valptrEv called 3201 returned 100% blocks executed 100%
     3201:  238:      _M_valptr() const
     3201:  239:      { return _M_storage._M_ptr(); }
     3201:  239-block  0
call    0 returned 3201
------------------
_ZNKSt13_Rb_tree_nodeIiE9_M_valptrEv:
function _ZNKSt13_Rb_tree_nodeIiE9_M_valptrEv called 14047 returned 100% blocks executed 100%
    14047:  238:      _M_valptr() const
    14047:  239:      { return _M_storage._M_ptr(); }
    14047:  239-block  0
call    0 returned 14047
------------------
        -:  240:#endif
        -:  241:    };
        -:  242:
        -:  243:  _GLIBCXX_PURE _Rb_tree_node_base*
        -:  244:  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
        -:  245:
        -:  246:  _GLIBCXX_PURE const _Rb_tree_node_base*
        -:  247:  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
        -:  248:
        -:  249:  _GLIBCXX_PURE _Rb_tree_node_base*
        -:  250:  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();
        -:  251:
        -:  252:  _GLIBCXX_PURE const _Rb_tree_node_base*
        -:  253:  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();
        -:  254:
        -:  255:  template<typename _Tp>
        -:  256:    struct _Rb_tree_iterator
        -:  257:    {
        -:  258:      typedef _Tp  value_type;
        -:  259:      typedef _Tp& reference;
        -:  260:      typedef _Tp* pointer;
        -:  261:
        -:  262:      typedef bidirectional_iterator_tag iterator_category;
        -:  263:      typedef ptrdiff_t			 difference_type;
        -:  264:
        -:  265:      typedef _Rb_tree_iterator<_Tp>		_Self;
        -:  266:      typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
        -:  267:      typedef _Rb_tree_node<_Tp>*		_Link_type;
        -:  268:
function _ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEC2Ev called 7 returned 100% blocks executed 100%
        7:  269:      _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
        7:  270:      : _M_node() { }
        -:  271:
        -:  272:      explicit
     9499:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     9499:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKcbEEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorISt4pairIKcbEEC2EPSt18_Rb_tree_node_base called 1109 returned 100% blocks executed 100%
     1109:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1109:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEC2EPSt18_Rb_tree_node_base called 4102 returned 100% blocks executed 100%
     4102:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     4102:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEC2EPSt18_Rb_tree_node_base called 2031 returned 100% blocks executed 100%
     2031:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     2031:  274:      : _M_node(__x) { }
------------------
_ZNSt17_Rb_tree_iteratorIiEC2EPSt18_Rb_tree_node_base:
function _ZNSt17_Rb_tree_iteratorIiEC2EPSt18_Rb_tree_node_base called 2257 returned 100% blocks executed 100%
     2257:  273:      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     2257:  274:      : _M_node(__x) { }
------------------
        -:  275:
        -:  276:      reference
     2056:  277:      operator*() const _GLIBCXX_NOEXCEPT
     2056:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
------------------
_ZNKSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEdeEv:
function _ZNKSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEdeEv called 346 returned 100% blocks executed 100%
      346:  277:      operator*() const _GLIBCXX_NOEXCEPT
      346:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
      346:  278-block  0
call    0 returned 346
------------------
_ZNKSt17_Rb_tree_iteratorISt4pairIKcbEEdeEv:
function _ZNKSt17_Rb_tree_iteratorISt4pairIKcbEEdeEv called 710 returned 100% blocks executed 100%
      710:  277:      operator*() const _GLIBCXX_NOEXCEPT
      710:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
      710:  278-block  0
call    0 returned 710
------------------
_ZNKSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEdeEv:
function _ZNKSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEdeEv called 1000 returned 100% blocks executed 100%
     1000:  277:      operator*() const _GLIBCXX_NOEXCEPT
     1000:  278:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
     1000:  278-block  0
call    0 returned 1000
------------------
        -:  279:
        -:  280:      pointer
function _ZNKSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEptEv called 5715 returned 100% blocks executed 100%
     5715:  281:      operator->() const _GLIBCXX_NOEXCEPT
     5715:  282:      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
     5715:  282-block  0
call    0 returned 5715
        -:  283:
        -:  284:      _Self&
    2989*:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    2989*:  287:	_M_node = _Rb_tree_increment(_M_node);
    2989*:  288:	return *this;
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorIiEppEv:
function _ZNSt17_Rb_tree_iteratorIiEppEv called 0 returned 0% blocks executed 0%
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
    %%%%%:  288-block  0
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKcbEEppEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKcbEEppEv called 0 returned 0% blocks executed 0%
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
    %%%%%:  288-block  0
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEppEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEppEv called 0 returned 0% blocks executed 0%
    #####:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
    #####:  287:	_M_node = _Rb_tree_increment(_M_node);
    #####:  288:	return *this;
    %%%%%:  288-block  0
        -:  289:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEppEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEppEv called 2989 returned 100% blocks executed 100%
     2989:  285:      operator++() _GLIBCXX_NOEXCEPT
        -:  286:      {
     2989:  287:	_M_node = _Rb_tree_increment(_M_node);
     2989:  288:	return *this;
     2989:  288-block  0
        -:  289:      }
------------------
        -:  290:
        -:  291:      _Self
        -:  292:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  293:      {
        -:  294:	_Self __tmp = *this;
        -:  295:	_M_node = _Rb_tree_increment(_M_node);
        -:  296:	return __tmp;
        -:  297:      }
        -:  298:
        -:  299:      _Self&
      30*:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
      30*:  302:	_M_node = _Rb_tree_decrement(_M_node);
      30*:  303:	return *this;
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEmmEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEEmmEv called 0 returned 0% blocks executed 0%
    #####:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
    #####:  302:	_M_node = _Rb_tree_decrement(_M_node);
    #####:  303:	return *this;
    %%%%%:  303-block  0
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKcbEEmmEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKcbEEmmEv called 0 returned 0% blocks executed 0%
    #####:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
    #####:  302:	_M_node = _Rb_tree_decrement(_M_node);
    #####:  303:	return *this;
    %%%%%:  303-block  0
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEmmEv:
function _ZNSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEmmEv called 19 returned 100% blocks executed 100%
       19:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
       19:  302:	_M_node = _Rb_tree_decrement(_M_node);
       19:  303:	return *this;
       19:  303-block  0
        -:  304:      }
------------------
_ZNSt17_Rb_tree_iteratorIiEmmEv:
function _ZNSt17_Rb_tree_iteratorIiEmmEv called 11 returned 100% blocks executed 100%
       11:  300:      operator--() _GLIBCXX_NOEXCEPT
        -:  301:      {
       11:  302:	_M_node = _Rb_tree_decrement(_M_node);
       11:  303:	return *this;
       11:  303-block  0
        -:  304:      }
------------------
        -:  305:
        -:  306:      _Self
        -:  307:      operator--(int) _GLIBCXX_NOEXCEPT
        -:  308:      {
        -:  309:	_Self __tmp = *this;
        -:  310:	_M_node = _Rb_tree_decrement(_M_node);
        -:  311:	return __tmp;
        -:  312:      }
        -:  313:
        -:  314:      friend bool
     2148:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
     2148:  316:      { return __x._M_node == __y._M_node; }
------------------
_ZSteqRKSt17_Rb_tree_iteratorIiES2_:
function _ZSteqRKSt17_Rb_tree_iteratorIiES2_ called 716 returned 100% blocks executed 100%
      716:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      716:  316:      { return __x._M_node == __y._M_node; }
      716:  316-block  0
------------------
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcbEES5_:
function _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKcbEES5_ called 412 returned 100% blocks executed 100%
      412:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
      412:  316:      { return __x._M_node == __y._M_node; }
      412:  316-block  0
------------------
_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEESB_:
function _ZSteqRKSt17_Rb_tree_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEESB_ called 1020 returned 100% blocks executed 100%
     1020:  315:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
     1020:  316:      { return __x._M_node == __y._M_node; }
     1020:  316-block  0
------------------
        -:  317:
        -:  318:#if ! __cpp_lib_three_way_comparison
        -:  319:      friend bool
function _ZStneRKSt17_Rb_tree_iteratorISt4pairIKiS0_IciEEES6_ called 3959 returned 100% blocks executed 100%
     3959:  320:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
     3959:  321:      { return __x._M_node != __y._M_node; }
     3959:  321-block  0
        -:  322:#endif
        -:  323:
        -:  324:      _Base_ptr _M_node;
        -:  325:  };
        -:  326:
        -:  327:  template<typename _Tp>
        -:  328:    struct _Rb_tree_const_iterator
        -:  329:    {
        -:  330:      typedef _Tp	 value_type;
        -:  331:      typedef const _Tp& reference;
        -:  332:      typedef const _Tp* pointer;
        -:  333:
        -:  334:      typedef _Rb_tree_iterator<_Tp> iterator;
        -:  335:
        -:  336:      typedef bidirectional_iterator_tag iterator_category;
        -:  337:      typedef ptrdiff_t			 difference_type;
        -:  338:
        -:  339:      typedef _Rb_tree_const_iterator<_Tp>		_Self;
        -:  340:      typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
        -:  341:      typedef const _Rb_tree_node<_Tp>*			_Link_type;
        -:  342:
function _ZNSt23_Rb_tree_const_iteratorIiEC2Ev called 101 returned 100% blocks executed 100%
      101:  343:      _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
      101:  344:      : _M_node() { }
        -:  345:
        -:  346:      explicit
function _ZNSt23_Rb_tree_const_iteratorIiEC2EPKSt18_Rb_tree_node_base called 15719 returned 100% blocks executed 100%
    15719:  347:      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    15719:  348:      : _M_node(__x) { }
        -:  349:
    1305*:  350:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
    1305*:  351:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKiS0_IciEEEC2ERKSt17_Rb_tree_iteratorIS3_E:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKiS0_IciEEEC2ERKSt17_Rb_tree_iteratorIS3_E called 543 returned 100% blocks executed 100%
      543:  350:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
      543:  351:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKcbEEC2ERKSt17_Rb_tree_iteratorIS2_E:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKcbEEC2ERKSt17_Rb_tree_iteratorIS2_E called 0 returned 0% blocks executed 0%
    #####:  350:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
    #####:  351:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEC2ERKSt17_Rb_tree_iteratorIS8_E:
function _ZNSt23_Rb_tree_const_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEEC2ERKSt17_Rb_tree_iteratorIS8_E called 0 returned 0% blocks executed 0%
    #####:  350:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
    #####:  351:      : _M_node(__it._M_node) { }
------------------
_ZNSt23_Rb_tree_const_iteratorIiEC2ERKSt17_Rb_tree_iteratorIiE:
function _ZNSt23_Rb_tree_const_iteratorIiEC2ERKSt17_Rb_tree_iteratorIiE called 762 returned 100% blocks executed 100%
      762:  350:      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
      762:  351:      : _M_node(__it._M_node) { }
------------------
        -:  352:
        -:  353:      iterator
     385*:  354:      _M_const_cast() const _GLIBCXX_NOEXCEPT
     385*:  355:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKiS0_IciEEE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKiS0_IciEEE13_M_const_castEv called 346 returned 100% blocks executed 100%
      346:  354:      _M_const_cast() const _GLIBCXX_NOEXCEPT
      346:  355:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
      346:  355-block  0
call    0 returned 346
------------------
_ZNKSt23_Rb_tree_const_iteratorIiE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorIiE13_M_const_castEv called 39 returned 100% blocks executed 100%
       39:  354:      _M_const_cast() const _GLIBCXX_NOEXCEPT
       39:  355:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
       39:  355-block  0
call    0 returned 39
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKcbEE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKcbEE13_M_const_castEv called 0 returned 0% blocks executed 0%
    #####:  354:      _M_const_cast() const _GLIBCXX_NOEXCEPT
    #####:  355:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
    %%%%%:  355-block  0
call    0 never executed
------------------
_ZNKSt23_Rb_tree_const_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE13_M_const_castEv:
function _ZNKSt23_Rb_tree_const_iteratorISt4pairIKSt3setIiSt4lessIiESaIiEES0_IibEEE13_M_const_castEv called 0 returned 0% blocks executed 0%
    #####:  354:      _M_const_cast() const _GLIBCXX_NOEXCEPT
    #####:  355:      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
    %%%%%:  355-block  0
call    0 never executed
------------------
        -:  356:
        -:  357:      reference
function _ZNKSt23_Rb_tree_const_iteratorIiEdeEv called 12059 returned 100% blocks executed 100%
    12059:  358:      operator*() const _GLIBCXX_NOEXCEPT
    12059:  359:      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
    12059:  359-block  0
call    0 returned 12059
        -:  360:
        -:  361:      pointer
        -:  362:      operator->() const _GLIBCXX_NOEXCEPT
        -:  363:      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
        -:  364:
        -:  365:      _Self&
function _ZNSt23_Rb_tree_const_iteratorIiEppEv called 3074 returned 100% blocks executed 100%
     3074:  366:      operator++() _GLIBCXX_NOEXCEPT
        -:  367:      {
     3074:  368:	_M_node = _Rb_tree_increment(_M_node);
     3074:  369:	return *this;
     3074:  369-block  0
        -:  370:      }
        -:  371:
        -:  372:      _Self
        -:  373:      operator++(int) _GLIBCXX_NOEXCEPT
        -:  374:      {
        -:  375:	_Self __tmp = *this;
        -:  376:	_M_node = _Rb_tree_increment(_M_node);
        -:  377:	return __tmp;
        -:  378:      }
        -:  379:
        -:  380:      _Self&
        -:  381:      operator--() _GLIBCXX_NOEXCEPT
        -:  382:      {
        -:  383:	_M_node = _Rb_tree_decrement(_M_node);
        -:  384:	return *this;
        -:  385:      }
        -:  386:
        -:  387:      _Self
        -:  388:      operator--(int) _GLIBCXX_NOEXCEPT
        -:  389:      {
        -:  390:	_Self __tmp = *this;
        -:  391:	_M_node = _Rb_tree_decrement(_M_node);
        -:  392:	return __tmp;
        -:  393:      }
        -:  394:
        -:  395:      friend bool
function _ZSteqRKSt23_Rb_tree_const_iteratorIiES2_ called 1266 returned 100% blocks executed 100%
     1266:  396:      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
     1266:  397:      { return __x._M_node == __y._M_node; }
     1266:  397-block  0
        -:  398:
        -:  399:#if ! __cpp_lib_three_way_comparison
        -:  400:      friend bool
function _ZStneRKSt23_Rb_tree_const_iteratorIiES2_ called 11089 returned 100% blocks executed 100%
    11089:  401:      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
    11089:  402:      { return __x._M_node != __y._M_node; }
    11089:  402-block  0
        -:  403:#endif
        -:  404:
        -:  405:      _Base_ptr _M_node;
        -:  406:    };
        -:  407:
        -:  408:  void
        -:  409:  _Rb_tree_insert_and_rebalance(const bool __insert_left,
        -:  410:				_Rb_tree_node_base* __x,
        -:  411:				_Rb_tree_node_base* __p,
        -:  412:				_Rb_tree_node_base& __header) throw ();
        -:  413:
        -:  414:  _Rb_tree_node_base*
        -:  415:  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
        -:  416:			       _Rb_tree_node_base& __header) throw ();
        -:  417:
        -:  418:#if __cplusplus >= 201402L
        -:  419:  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
        -:  420:    struct __has_is_transparent
        -:  421:    { };
        -:  422:
        -:  423:  template<typename _Cmp, typename _SfinaeType>
        -:  424:    struct __has_is_transparent<_Cmp, _SfinaeType,
        -:  425:				__void_t<typename _Cmp::is_transparent>>
        -:  426:    { typedef void type; };
        -:  427:
        -:  428:  template<typename _Cmp, typename _SfinaeType>
        -:  429:    using __has_is_transparent_t
        -:  430:      = typename __has_is_transparent<_Cmp, _SfinaeType>::type;
        -:  431:#endif
        -:  432:
        -:  433:#if __cplusplus > 201402L
        -:  434:  template<typename _Tree1, typename _Cmp2>
        -:  435:    struct _Rb_tree_merge_helper { };
        -:  436:#endif
        -:  437:
        -:  438:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -:  439:	   typename _Compare, typename _Alloc = allocator<_Val> >
        -:  440:    class _Rb_tree
        -:  441:    {
        -:  442:      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        -:  443:	rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
        -:  444:
        -:  445:      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;
        -:  446:
        -:  447:    protected:
        -:  448:      typedef _Rb_tree_node_base* 		_Base_ptr;
        -:  449:      typedef const _Rb_tree_node_base* 	_Const_Base_ptr;
        -:  450:      typedef _Rb_tree_node<_Val>* 		_Link_type;
        -:  451:      typedef const _Rb_tree_node<_Val>*	_Const_Link_type;
        -:  452:
        -:  453:    private:
        -:  454:      // Functor recycling a pool of nodes and using allocation once the pool
        -:  455:      // is empty.
        -:  456:      struct _Reuse_or_alloc_node
        -:  457:      {
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE20_Reuse_or_alloc_nodeC2ERS5_ called 78 returned 100% blocks executed 86%
       78:  458:	_Reuse_or_alloc_node(_Rb_tree& __t)
       78:  459:	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
       78:  459-block  0
call    0 returned 78
call    1 returned 78
        -:  460:	{
       78:  461:	  if (_M_root)
branch  0 taken 78 (fallthrough)
branch  1 taken 0
        -:  462:	    {
       78:  463:	      _M_root->_M_parent = 0;
        -:  464:
       78:  465:	      if (_M_nodes->_M_left)
       78:  465-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 65
       13:  466:		_M_nodes = _M_nodes->_M_left;
       13:  466-block  0
        -:  467:	    }
        -:  468:	  else
    #####:  469:	    _M_nodes = 0;
    %%%%%:  469-block  0
       78:  470:	}
        -:  471:
        -:  472:#if __cplusplus >= 201103L
        -:  473:	_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;
        -:  474:#endif
        -:  475:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE20_Reuse_or_alloc_nodeD2Ev called 78 returned 100% blocks executed 100%
       78:  476:	~_Reuse_or_alloc_node()
       78:  477:	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
       78:  477-block  0
call    0 returned 78
        -:  478:
        -:  479:	template<typename _Arg>
        -:  480:	  _Link_type
        -:  481:#if __cplusplus < 201103L
        -:  482:	  operator()(const _Arg& __arg)
        -:  483:#else
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE20_Reuse_or_alloc_nodeclIRKiEEPSt13_Rb_tree_nodeIiEOT_ called 79 returned 100% blocks executed 100%
       79:  484:	  operator()(_Arg&& __arg)
        -:  485:#endif
        -:  486:	  {
       79:  487:	    _Link_type __node = static_cast<_Link_type>(_M_extract());
       79:  487-block  0
call    0 returned 79
       79:  488:	    if (__node)
branch  0 taken 78 (fallthrough)
branch  1 taken 1
        -:  489:	      {
       78:  490:		_M_t._M_destroy_node(__node);
       78:  490-block  0
call    0 returned 78
       78:  491:		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
call    0 returned 78
call    1 returned 78
       78:  492:		return __node;
        -:  493:	      }
        -:  494:
        1:  495:	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
        1:  495-block  0
call    0 returned 1
call    1 returned 1
        -:  496:	  }
        -:  497:
        -:  498:      private:
        -:  499:	_Base_ptr
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE20_Reuse_or_alloc_node10_M_extractEv called 79 returned 100% blocks executed 57%
       79:  500:	_M_extract()
        -:  501:	{
       79:  502:	  if (!_M_nodes)
       79:  502-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 78
        1:  503:	    return _M_nodes;
        1:  503-block  0
        -:  504:
       78:  505:	  _Base_ptr __node = _M_nodes;
       78:  506:	  _M_nodes = _M_nodes->_M_parent;
       78:  507:	  if (_M_nodes)
       78:  507-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 65
        -:  508:	    {
       13:  509:	      if (_M_nodes->_M_right == __node)
       13:  509-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -:  510:		{
    #####:  511:		  _M_nodes->_M_right = 0;
        -:  512:
    #####:  513:		  if (_M_nodes->_M_left)
    %%%%%:  513-block  0
branch  0 never executed
branch  1 never executed
        -:  514:		    {
    #####:  515:		      _M_nodes = _M_nodes->_M_left;
    %%%%%:  515-block  0
        -:  516:
    #####:  517:		      while (_M_nodes->_M_right)
    %%%%%:  517-block  0
branch  0 never executed
branch  1 never executed
    #####:  518:			_M_nodes = _M_nodes->_M_right;
    %%%%%:  518-block  0
        -:  519:
    #####:  520:		      if (_M_nodes->_M_left)
    %%%%%:  520-block  0
branch  0 never executed
branch  1 never executed
    #####:  521:			_M_nodes = _M_nodes->_M_left;
    %%%%%:  521-block  0
        -:  522:		    }
        -:  523:		}
        -:  524:	      else // __node is on the left.
       13:  525:		_M_nodes->_M_left = 0;
       13:  525-block  0
        -:  526:	    }
        -:  527:	  else
       65:  528:	    _M_root = 0;
       65:  528-block  0
        -:  529:
       78:  530:	  return __node;
       78:  530-block  0
        -:  531:	}
        -:  532:
        -:  533:	_Base_ptr _M_root;
        -:  534:	_Base_ptr _M_nodes;
        -:  535:	_Rb_tree& _M_t;
        -:  536:      };
        -:  537:
        -:  538:      // Functor similar to the previous one but without any pool of nodes to
        -:  539:      // recycle.
        -:  540:      struct _Alloc_node
        -:  541:      {
     1557:  542:	_Alloc_node(_Rb_tree& __t)
     1557:  543:	: _M_t(__t) { }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeC2ERS8_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeC2ERS8_ called 171 returned 100% blocks executed 100%
      171:  542:	_Alloc_node(_Rb_tree& __t)
      171:  543:	: _M_t(__t) { }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_Alloc_nodeC2ERSD_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_Alloc_nodeC2ERSD_ called 75 returned 100% blocks executed 100%
       75:  542:	_Alloc_node(_Rb_tree& __t)
       75:  543:	: _M_t(__t) { }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeC2ERS9_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeC2ERS9_ called 643 returned 100% blocks executed 100%
      643:  542:	_Alloc_node(_Rb_tree& __t)
      643:  543:	: _M_t(__t) { }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeC2ERS5_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeC2ERS5_ called 668 returned 100% blocks executed 100%
      668:  542:	_Alloc_node(_Rb_tree& __t)
      668:  543:	: _M_t(__t) { }
------------------
        -:  544:
        -:  545:	template<typename _Arg>
        -:  546:	  _Link_type
        -:  547:#if __cplusplus < 201103L
        -:  548:	  operator()(const _Arg& __arg) const
        -:  549:#else
     1850:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
     1850:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
------------------
_ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeclIRS3_EEPSt13_Rb_tree_nodeIS3_EOT_:
function _ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeclIRS3_EEPSt13_Rb_tree_nodeIS3_EOT_ called 346 returned 100% blocks executed 100%
      346:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
      346:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
      346:  552-block  0
call    0 returned 346
call    1 returned 346
------------------
_ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeclIS2_EEPSt13_Rb_tree_nodeIS2_EOT_:
function _ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_Alloc_nodeclIS2_EEPSt13_Rb_tree_nodeIS2_EOT_ called 171 returned 100% blocks executed 100%
      171:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
      171:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
      171:  552-block  0
call    0 returned 171
call    1 returned 171
------------------
_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeclIiEEPSt13_Rb_tree_nodeIiEOT_:
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeclIiEEPSt13_Rb_tree_nodeIiEOT_ called 95 returned 100% blocks executed 100%
       95:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
       95:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
       95:  552-block  0
call    0 returned 95
call    1 returned 95
------------------
_ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_Alloc_nodeclIS8_EEPSt13_Rb_tree_nodeIS8_EOT_:
function _ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_Alloc_nodeclIS8_EEPSt13_Rb_tree_nodeIS8_EOT_ called 75 returned 100% blocks executed 100%
       75:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
       75:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
       75:  552-block  0
call    0 returned 75
call    1 returned 75
------------------
_ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeclIS3_EEPSt13_Rb_tree_nodeIS3_EOT_:
function _ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_Alloc_nodeclIS3_EEPSt13_Rb_tree_nodeIS3_EOT_ called 562 returned 100% blocks executed 100%
      562:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
      562:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
      562:  552-block  0
call    0 returned 562
call    1 returned 562
------------------
_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeclIRKiEEPSt13_Rb_tree_nodeIiEOT_:
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_Alloc_nodeclIRKiEEPSt13_Rb_tree_nodeIiEOT_ called 601 returned 100% blocks executed 100%
      601:  550:	  operator()(_Arg&& __arg) const
        -:  551:#endif
      601:  552:	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
      601:  552-block  0
call    0 returned 601
call    1 returned 601
------------------
        -:  553:
        -:  554:      private:
        -:  555:	_Rb_tree& _M_t;
        -:  556:      };
        -:  557:
        -:  558:    public:
        -:  559:      typedef _Key 				key_type;
        -:  560:      typedef _Val 				value_type;
        -:  561:      typedef value_type* 			pointer;
        -:  562:      typedef const value_type* 		const_pointer;
        -:  563:      typedef value_type& 			reference;
        -:  564:      typedef const value_type& 		const_reference;
        -:  565:      typedef size_t 				size_type;
        -:  566:      typedef ptrdiff_t 			difference_type;
        -:  567:      typedef _Alloc 				allocator_type;
        -:  568:
        -:  569:      _Node_allocator&
     6184:  570:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
     6184:  571:      { return this->_M_impl; }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE21_M_get_Node_allocatorEv called 684 returned 100% blocks executed 100%
      684:  570:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
      684:  571:      { return this->_M_impl; }
      684:  571-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE21_M_get_Node_allocatorEv called 300 returned 100% blocks executed 100%
      300:  570:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
      300:  571:      { return this->_M_impl; }
      300:  571-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE21_M_get_Node_allocatorEv called 2546 returned 100% blocks executed 100%
     2546:  570:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
     2546:  571:      { return this->_M_impl; }
     2546:  571-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv called 2654 returned 100% blocks executed 100%
     2654:  570:      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
     2654:  571:      { return this->_M_impl; }
     2654:  571-block  0
------------------
        -:  572:
        -:  573:      const _Node_allocator&
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE21_M_get_Node_allocatorEv called 0 returned 0% blocks executed 0%
    #####:  574:      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
    #####:  575:      { return this->_M_impl; }
    %%%%%:  575-block  0
        -:  576:
        -:  577:      allocator_type
        -:  578:      get_allocator() const _GLIBCXX_NOEXCEPT
        -:  579:      { return allocator_type(_M_get_Node_allocator()); }
        -:  580:
        -:  581:    protected:
        -:  582:      _Link_type
     2019:  583:      _M_get_node()
     2019:  584:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_get_nodeEv called 697 returned 100% blocks executed 100%
      697:  583:      _M_get_node()
      697:  584:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
      697:  584-block  0
call    0 returned 697
call    1 returned 697
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_get_nodeEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_get_nodeEv called 171 returned 100% blocks executed 100%
      171:  583:      _M_get_node()
      171:  584:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
      171:  584-block  0
call    0 returned 171
call    1 returned 171
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_get_nodeEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_get_nodeEv called 1076 returned 100% blocks executed 100%
     1076:  583:      _M_get_node()
     1076:  584:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
     1076:  584-block  0
call    0 returned 1076
call    1 returned 1076
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_get_nodeEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_get_nodeEv called 75 returned 100% blocks executed 100%
       75:  583:      _M_get_node()
       75:  584:      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
       75:  584-block  0
call    0 returned 75
call    1 returned 75
------------------
        -:  585:
        -:  586:      void
      995:  587:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      995:  588:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E called 171 returned 100% blocks executed 100%
      171:  587:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      171:  588:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
      171:  588-block  0
call    0 returned 171
call    1 returned 171
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E called 75 returned 100% blocks executed 100%
       75:  587:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
       75:  588:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
       75:  588-block  0
call    0 returned 75
call    1 returned 75
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E called 197 returned 100% blocks executed 100%
      197:  587:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      197:  588:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
      197:  588-block  0
call    0 returned 197
call    1 returned 197
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_put_nodeEPSt13_Rb_tree_nodeIiE called 552 returned 100% blocks executed 100%
      552:  587:      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
      552:  588:      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
      552:  588-block  0
call    0 returned 552
call    1 returned 552
------------------
        -:  589:
        -:  590:#if __cplusplus < 201103L
        -:  591:      void
        -:  592:      _M_construct_node(_Link_type __node, const value_type& __x)
        -:  593:      {
        -:  594:	__try
        -:  595:	  { get_allocator().construct(__node->_M_valptr(), __x); }
        -:  596:	__catch(...)
        -:  597:	  {
        -:  598:	    _M_put_node(__node);
        -:  599:	    __throw_exception_again;
        -:  600:	  }
        -:  601:      }
        -:  602:
        -:  603:      _Link_type
        -:  604:      _M_create_node(const value_type& __x)
        -:  605:      {
        -:  606:	_Link_type __tmp = _M_get_node();
        -:  607:	_M_construct_node(__tmp, __x);
        -:  608:	return __tmp;
        -:  609:      }
        -:  610:#else
        -:  611:      template<typename... _Args>
        -:  612:	void
    2097*:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
    2097*:  617:	      ::new(__node) _Rb_tree_node<_Val>;
    2097*:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
    =====:  626:	      __throw_exception_again;
        -:  627:	    }
    2097*:  628:	}
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJRS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJRS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_ called 346 returned 100% blocks executed 100%
      346:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
      346:  617:	      ::new(__node) _Rb_tree_node<_Val>;
      346:  617-block  0
call    0 returned 346
      346:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 346
call    1 returned 346
call    2 returned 346
call    3 returned 346
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
        -:  622:	  __catch(...)
        -:  623:	    {
        -:  624:	      __node->~_Rb_tree_node<_Val>();
        -:  625:	      _M_put_node(__node);
        -:  626:	      __throw_exception_again;
        -:  627:	    }
      346:  628:	}
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_ called 171 returned 100% blocks executed 100%
      171:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
      171:  617:	      ::new(__node) _Rb_tree_node<_Val>;
      171:  617-block  0
call    0 returned 171
      171:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 171
call    1 returned 171
call    2 returned 171
call    3 returned 171
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
        -:  622:	  __catch(...)
        -:  623:	    {
        -:  624:	      __node->~_Rb_tree_node<_Val>();
        -:  625:	      _M_put_node(__node);
        -:  626:	      __throw_exception_again;
        -:  627:	    }
      171:  628:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_construct_nodeIJiEEEvPSt13_Rb_tree_nodeIiEDpOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_construct_nodeIJiEEEvPSt13_Rb_tree_nodeIiEDpOT_ called 95 returned 100% blocks executed 100%
       95:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
       95:  617:	      ::new(__node) _Rb_tree_node<_Val>;
       95:  617-block  0
call    0 returned 95
       95:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 95
call    1 returned 95
call    2 returned 95
call    3 returned 95
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
        -:  622:	  __catch(...)
        -:  623:	    {
        -:  624:	      __node->~_Rb_tree_node<_Val>();
        -:  625:	      _M_put_node(__node);
        -:  626:	      __throw_exception_again;
        -:  627:	    }
       95:  628:	}
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE17_M_construct_nodeIJS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE17_M_construct_nodeIJS8_EEEvPSt13_Rb_tree_nodeIS8_EDpOT_ called 75 returned 100% blocks executed 58%
       75:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
       75:  617:	      ::new(__node) _Rb_tree_node<_Val>;
       75:  617-block  0
call    0 returned 75
       75:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 75
call    1 returned 75
call    2 returned 75
call    3 returned 75
branch  4 taken 75 (fallthrough)
branch  5 taken 0 (throw)
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
    $$$$$:  622-block  0
    $$$$$:  622-block  1
call    0 never executed
    $$$$$:  622-block  2
call    1 never executed
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
call    0 never executed
    =====:  626:	      __throw_exception_again;
call    0 never executed
        -:  627:	    }
       75:  628:	}
       75:  628-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_ called 562 returned 100% blocks executed 100%
      562:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
      562:  617:	      ::new(__node) _Rb_tree_node<_Val>;
      562:  617-block  0
call    0 returned 562
      562:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 562
call    1 returned 562
call    2 returned 562
call    3 returned 562
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
        -:  622:	  __catch(...)
        -:  623:	    {
        -:  624:	      __node->~_Rb_tree_node<_Val>();
        -:  625:	      _M_put_node(__node);
        -:  626:	      __throw_exception_again;
        -:  627:	    }
      562:  628:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_construct_nodeIJRKiEEEvPSt13_Rb_tree_nodeIiEDpOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_construct_nodeIJRKiEEEvPSt13_Rb_tree_nodeIiEDpOT_ called 680 returned 100% blocks executed 100%
      680:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
      680:  617:	      ::new(__node) _Rb_tree_node<_Val>;
      680:  617-block  0
call    0 returned 680
      680:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 680
call    1 returned 680
call    2 returned 680
call    3 returned 680
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
        -:  622:	  __catch(...)
        -:  623:	    {
        -:  624:	      __node->~_Rb_tree_node<_Val>();
        -:  625:	      _M_put_node(__node);
        -:  626:	      __throw_exception_again;
        -:  627:	    }
      680:  628:	}
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
    #####:  617:	      ::new(__node) _Rb_tree_node<_Val>;
    %%%%%:  617-block  0
call    0 never executed
    #####:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
    $$$$$:  622-block  0
    $$$$$:  622-block  1
call    0 never executed
    $$$$$:  622-block  2
call    1 never executed
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
call    0 never executed
    =====:  626:	      __throw_exception_again;
call    0 never executed
        -:  627:	    }
    #####:  628:	}
    %%%%%:  628-block  0
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEvPSt13_Rb_tree_nodeIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
    #####:  617:	      ::new(__node) _Rb_tree_node<_Val>;
    %%%%%:  617-block  0
call    0 never executed
    #####:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
    $$$$$:  622-block  0
    $$$$$:  622-block  1
call    0 never executed
    $$$$$:  622-block  2
call    1 never executed
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
call    0 never executed
    =====:  626:	      __throw_exception_again;
call    0 never executed
        -:  627:	    }
    #####:  628:	}
    %%%%%:  628-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJS0_IiS2_EEEEvPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_construct_nodeIJS0_IiS2_EEEEvPSt13_Rb_tree_nodeIS3_EDpOT_ called 168 returned 100% blocks executed 58%
      168:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
      168:  617:	      ::new(__node) _Rb_tree_node<_Val>;
      168:  617-block  0
call    0 returned 168
      168:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 returned 168
call    1 returned 168
call    2 returned 168
call    3 returned 168
branch  4 taken 168 (fallthrough)
branch  5 taken 0 (throw)
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
    $$$$$:  622-block  0
    $$$$$:  622-block  1
call    0 never executed
    $$$$$:  622-block  2
call    1 never executed
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
call    0 never executed
    =====:  626:	      __throw_exception_again;
call    0 never executed
        -:  627:	    }
      168:  628:	}
      168:  628-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  613:	_M_construct_node(_Link_type __node, _Args&&... __args)
        -:  614:	{
        -:  615:	  __try
        -:  616:	    {
    #####:  617:	      ::new(__node) _Rb_tree_node<_Val>;
    %%%%%:  617-block  0
call    0 never executed
    #####:  618:	      _Alloc_traits::construct(_M_get_Node_allocator(),
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:  619:				       __node->_M_valptr(),
        -:  620:				       std::forward<_Args>(__args)...);
        -:  621:	    }
    =====:  622:	  __catch(...)
    $$$$$:  622-block  0
    $$$$$:  622-block  1
call    0 never executed
    $$$$$:  622-block  2
call    1 never executed
        -:  623:	    {
    =====:  624:	      __node->~_Rb_tree_node<_Val>();
    =====:  625:	      _M_put_node(__node);
call    0 never executed
    =====:  626:	      __throw_exception_again;
call    0 never executed
        -:  627:	    }
    #####:  628:	}
    %%%%%:  628-block  0
------------------
        -:  629:
        -:  630:      template<typename... _Args>
        -:  631:	_Link_type
    2019*:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
    2019*:  634:	  _Link_type __tmp = _M_get_node();
    2019*:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
    2019*:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJRS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJRS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_ called 346 returned 100% blocks executed 100%
      346:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
      346:  634:	  _Link_type __tmp = _M_get_node();
      346:  634-block  0
call    0 returned 346
      346:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 346
call    1 returned 346
      346:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_ called 171 returned 100% blocks executed 100%
      171:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
      171:  634:	  _Link_type __tmp = _M_get_node();
      171:  634-block  0
call    0 returned 171
      171:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 171
call    1 returned 171
      171:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeIJiEEEPSt13_Rb_tree_nodeIiEDpOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeIJiEEEPSt13_Rb_tree_nodeIiEDpOT_ called 95 returned 100% blocks executed 100%
       95:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
       95:  634:	  _Link_type __tmp = _M_get_node();
       95:  634-block  0
call    0 returned 95
       95:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 95
call    1 returned 95
       95:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_create_nodeIJS8_EEEPSt13_Rb_tree_nodeIS8_EDpOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_create_nodeIJS8_EEEPSt13_Rb_tree_nodeIS8_EDpOT_ called 75 returned 100% blocks executed 100%
       75:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
       75:  634:	  _Link_type __tmp = _M_get_node();
       75:  634-block  0
call    0 returned 75
       75:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 75
call    1 returned 75
       75:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_ called 562 returned 100% blocks executed 100%
      562:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
      562:  634:	  _Link_type __tmp = _M_get_node();
      562:  634-block  0
call    0 returned 562
      562:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 562
call    1 returned 562
      562:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeIJRKiEEEPSt13_Rb_tree_nodeIiEDpOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_create_nodeIJRKiEEEPSt13_Rb_tree_nodeIiEDpOT_ called 602 returned 100% blocks executed 100%
      602:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
      602:  634:	  _Link_type __tmp = _M_get_node();
      602:  634-block  0
call    0 returned 602
      602:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 602
call    1 returned 602
      602:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
    #####:  634:	  _Link_type __tmp = _M_get_node();
    %%%%%:  634-block  0
call    0 never executed
    #####:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEEPSt13_Rb_tree_nodeIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
    #####:  634:	  _Link_type __tmp = _M_get_node();
    %%%%%:  634-block  0
call    0 never executed
    #####:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJS0_IiS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_create_nodeIJS0_IiS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_ called 168 returned 100% blocks executed 100%
      168:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
      168:  634:	  _Link_type __tmp = _M_get_node();
      168:  634-block  0
call    0 returned 168
      168:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 returned 168
call    1 returned 168
      168:  636:	  return __tmp;
        -:  637:	}
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_ called 0 returned 0% blocks executed 0%
    #####:  632:	_M_create_node(_Args&&... __args)
        -:  633:	{
    #####:  634:	  _Link_type __tmp = _M_get_node();
    %%%%%:  634-block  0
call    0 never executed
    #####:  635:	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  636:	  return __tmp;
        -:  637:	}
------------------
        -:  638:#endif
        -:  639:
        -:  640:      void
     1073:  641:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  642:      {
        -:  643:#if __cplusplus < 201103L
        -:  644:	get_allocator().destroy(__p->_M_valptr());
        -:  645:#else
     1073:  646:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
     1073:  647:	__p->~_Rb_tree_node<_Val>();
        -:  648:#endif
     1073:  649:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E called 171 returned 100% blocks executed 100%
      171:  641:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  642:      {
        -:  643:#if __cplusplus < 201103L
        -:  644:	get_allocator().destroy(__p->_M_valptr());
        -:  645:#else
      171:  646:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      171:  646-block  0
call    0 returned 171
call    1 returned 171
call    2 returned 171
      171:  647:	__p->~_Rb_tree_node<_Val>();
        -:  648:#endif
      171:  649:      }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E called 75 returned 100% blocks executed 100%
       75:  641:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  642:      {
        -:  643:#if __cplusplus < 201103L
        -:  644:	get_allocator().destroy(__p->_M_valptr());
        -:  645:#else
       75:  646:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
       75:  646-block  0
call    0 returned 75
call    1 returned 75
call    2 returned 75
       75:  647:	__p->~_Rb_tree_node<_Val>();
        -:  648:#endif
       75:  649:      }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E called 197 returned 100% blocks executed 100%
      197:  641:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  642:      {
        -:  643:#if __cplusplus < 201103L
        -:  644:	get_allocator().destroy(__p->_M_valptr());
        -:  645:#else
      197:  646:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      197:  646-block  0
call    0 returned 197
call    1 returned 197
call    2 returned 197
      197:  647:	__p->~_Rb_tree_node<_Val>();
        -:  648:#endif
      197:  649:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE15_M_destroy_nodeEPSt13_Rb_tree_nodeIiE called 630 returned 100% blocks executed 100%
      630:  641:      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  642:      {
        -:  643:#if __cplusplus < 201103L
        -:  644:	get_allocator().destroy(__p->_M_valptr());
        -:  645:#else
      630:  646:	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
      630:  646-block  0
call    0 returned 630
call    1 returned 630
call    2 returned 630
      630:  647:	__p->~_Rb_tree_node<_Val>();
        -:  648:#endif
      630:  649:      }
------------------
        -:  650:
        -:  651:      void
      995:  652:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  653:      {
      995:  654:	_M_destroy_node(__p);
      995:  655:	_M_put_node(__p);
      995:  656:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E called 171 returned 100% blocks executed 100%
      171:  652:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  653:      {
      171:  654:	_M_destroy_node(__p);
      171:  654-block  0
call    0 returned 171
      171:  655:	_M_put_node(__p);
call    0 returned 171
      171:  656:      }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E called 75 returned 100% blocks executed 100%
       75:  652:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  653:      {
       75:  654:	_M_destroy_node(__p);
       75:  654-block  0
call    0 returned 75
       75:  655:	_M_put_node(__p);
call    0 returned 75
       75:  656:      }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E called 197 returned 100% blocks executed 100%
      197:  652:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  653:      {
      197:  654:	_M_destroy_node(__p);
      197:  654-block  0
call    0 returned 197
      197:  655:	_M_put_node(__p);
call    0 returned 197
      197:  656:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE12_M_drop_nodeEPSt13_Rb_tree_nodeIiE:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE12_M_drop_nodeEPSt13_Rb_tree_nodeIiE called 552 returned 100% blocks executed 100%
      552:  652:      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
        -:  653:      {
      552:  654:	_M_destroy_node(__p);
      552:  654-block  0
call    0 returned 552
      552:  655:	_M_put_node(__p);
call    0 returned 552
      552:  656:      }
------------------
        -:  657:
        -:  658:      template<typename _NodeGen>
        -:  659:	_Link_type
      441:  660:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  661:	{
      441:  662:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
      441:  663:	  __tmp->_M_color = __x->_M_color;
      441:  664:	  __tmp->_M_left = 0;
      441:  665:	  __tmp->_M_right = 0;
      441:  666:	  return __tmp;
        -:  667:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_M_clone_nodeINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_RT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_M_clone_nodeINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_RT_ called 373 returned 100% blocks executed 100%
      373:  660:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  661:	{
      373:  662:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
      373:  662-block  0
call    0 returned 373
call    1 returned 373
      373:  663:	  __tmp->_M_color = __x->_M_color;
      373:  664:	  __tmp->_M_left = 0;
      373:  665:	  __tmp->_M_right = 0;
      373:  666:	  return __tmp;
        -:  667:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_M_clone_nodeINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_RT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_M_clone_nodeINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_RT_ called 68 returned 100% blocks executed 100%
       68:  660:	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
        -:  661:	{
       68:  662:	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
       68:  662-block  0
call    0 returned 68
call    1 returned 68
       68:  663:	  __tmp->_M_color = __x->_M_color;
       68:  664:	  __tmp->_M_left = 0;
       68:  665:	  __tmp->_M_right = 0;
       68:  666:	  return __tmp;
        -:  667:	}
------------------
        -:  668:
        -:  669:    protected:
        -:  670:#if _GLIBCXX_INLINE_VERSION
        -:  671:      template<typename _Key_compare>
        -:  672:#else
        -:  673:      // Unused _Is_pod_comparator is kept as it is part of mangled name.
        -:  674:      template<typename _Key_compare,
        -:  675:	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
        -:  676:#endif
        -:  677:	struct _Rb_tree_impl
        -:  678:	: public _Node_allocator
        -:  679:	, public _Rb_tree_key_compare<_Key_compare>
        -:  680:	, public _Rb_tree_header
        -:  681:	{
        -:  682:	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
        -:  683:
      571:  684:	  _Rb_tree_impl()
        -:  685:	    _GLIBCXX_NOEXCEPT_IF(
        -:  686:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  687:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
      571:  688:	  : _Node_allocator()
      571:  689:	  { }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EEC2Ev:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE13_Rb_tree_implIS6_Lb1EEC2Ev called 57 returned 100% blocks executed 100%
       57:  684:	  _Rb_tree_impl()
        -:  685:	    _GLIBCXX_NOEXCEPT_IF(
        -:  686:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  687:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
       57:  688:	  : _Node_allocator()
       57:  688-block  0
call    0 returned 57
call    1 returned 57
call    2 returned 57
       57:  689:	  { }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE13_Rb_tree_implISB_Lb1EEC2Ev:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE13_Rb_tree_implISB_Lb1EEC2Ev called 7 returned 100% blocks executed 100%
        7:  684:	  _Rb_tree_impl()
        -:  685:	    _GLIBCXX_NOEXCEPT_IF(
        -:  686:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  687:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
        7:  688:	  : _Node_allocator()
        7:  688-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        7:  689:	  { }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb1EEC2Ev:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb1EEC2Ev called 405 returned 100% blocks executed 100%
      405:  684:	  _Rb_tree_impl()
        -:  685:	    _GLIBCXX_NOEXCEPT_IF(
        -:  686:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  687:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
      405:  688:	  : _Node_allocator()
      405:  688-block  0
call    0 returned 405
call    1 returned 405
call    2 returned 405
      405:  689:	  { }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE13_Rb_tree_implIS7_Lb1EEC2Ev:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE13_Rb_tree_implIS7_Lb1EEC2Ev called 102 returned 100% blocks executed 100%
      102:  684:	  _Rb_tree_impl()
        -:  685:	    _GLIBCXX_NOEXCEPT_IF(
        -:  686:		is_nothrow_default_constructible<_Node_allocator>::value
        -:  687:		&& is_nothrow_default_constructible<_Base_key_compare>::value )
      102:  688:	  : _Node_allocator()
      102:  688-block  0
call    0 returned 102
call    1 returned 102
call    2 returned 102
      102:  689:	  { }
------------------
        -:  690:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb1EEC2ERKS7_ called 345 returned 100% blocks executed 100%
      345:  691:	  _Rb_tree_impl(const _Rb_tree_impl& __x)
        -:  692:	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
      345:  693:	  , _Base_key_compare(__x._M_key_compare)
      345:  693-block  0
call    0 returned 345
call    1 returned 345
call    2 returned 345
      345:  694:	  { }
        -:  695:
        -:  696:#if __cplusplus < 201103L
        -:  697:	  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
        -:  698:	  : _Node_allocator(__a), _Base_key_compare(__comp)
        -:  699:	  { }
        -:  700:#else
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb1EEC2EOS7_ called 7 returned 100% blocks executed 100%
        7:  701:	  _Rb_tree_impl(_Rb_tree_impl&&) = default;
        7:  701-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
        -:  702:
        -:  703:	  explicit
        -:  704:	  _Rb_tree_impl(_Node_allocator&& __a)
        -:  705:	  : _Node_allocator(std::move(__a))
        -:  706:	  { }
        -:  707:
        -:  708:	  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)
        -:  709:	  : _Node_allocator(std::move(__a)),
        -:  710:	    _Base_key_compare(std::move(__x)),
        -:  711:	    _Rb_tree_header(std::move(__x))
        -:  712:	  { }
        -:  713:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE13_Rb_tree_implIS3_Lb1EEC2ERKS3_OSaISt13_Rb_tree_nodeIiEE called 14 returned 100% blocks executed 100%
       14:  714:	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
       14:  715:	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
       14:  715-block  0
call    0 returned 14
call    1 returned 14
call    2 returned 14
call    3 returned 14
       14:  716:	  { }
        -:  717:#endif
        -:  718:	};
        -:  719:
        -:  720:      _Rb_tree_impl<_Compare> _M_impl;
        -:  721:
        -:  722:    protected:
        -:  723:      _Base_ptr&
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_rootEv called 490 returned 100% blocks executed 100%
      490:  724:      _M_root() _GLIBCXX_NOEXCEPT
      490:  725:      { return this->_M_impl._M_header._M_parent; }
      490:  725-block  0
        -:  726:
        -:  727:      _Const_Base_ptr
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_rootEv called 412 returned 100% blocks executed 100%
      412:  728:      _M_root() const _GLIBCXX_NOEXCEPT
      412:  729:      { return this->_M_impl._M_header._M_parent; }
      412:  729-block  0
        -:  730:
        -:  731:      _Base_ptr&
     412*:  732:      _M_leftmost() _GLIBCXX_NOEXCEPT
     412*:  733:      { return this->_M_impl._M_header._M_left; }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_leftmostEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11_M_leftmostEv called 0 returned 0% blocks executed 0%
    #####:  732:      _M_leftmost() _GLIBCXX_NOEXCEPT
    #####:  733:      { return this->_M_impl._M_header._M_left; }
    %%%%%:  733-block  0
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11_M_leftmostEv called 0 returned 0% blocks executed 0%
    #####:  732:      _M_leftmost() _GLIBCXX_NOEXCEPT
    #####:  733:      { return this->_M_impl._M_header._M_left; }
    %%%%%:  733-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_leftmostEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11_M_leftmostEv called 0 returned 0% blocks executed 0%
    #####:  732:      _M_leftmost() _GLIBCXX_NOEXCEPT
    #####:  733:      { return this->_M_impl._M_header._M_left; }
    %%%%%:  733-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_leftmostEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE11_M_leftmostEv called 412 returned 100% blocks executed 100%
      412:  732:      _M_leftmost() _GLIBCXX_NOEXCEPT
      412:  733:      { return this->_M_impl._M_header._M_left; }
      412:  733-block  0
------------------
        -:  734:
        -:  735:      _Const_Base_ptr
        -:  736:      _M_leftmost() const _GLIBCXX_NOEXCEPT
        -:  737:      { return this->_M_impl._M_header._M_left; }
        -:  738:
        -:  739:      _Base_ptr&
    1111*:  740:      _M_rightmost() _GLIBCXX_NOEXCEPT
    1111*:  741:      { return this->_M_impl._M_header._M_right; }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE12_M_rightmostEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE12_M_rightmostEv called 607 returned 100% blocks executed 100%
      607:  740:      _M_rightmost() _GLIBCXX_NOEXCEPT
      607:  741:      { return this->_M_impl._M_header._M_right; }
      607:  741-block  0
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE12_M_rightmostEv called 0 returned 0% blocks executed 0%
    #####:  740:      _M_rightmost() _GLIBCXX_NOEXCEPT
    #####:  741:      { return this->_M_impl._M_header._M_right; }
    %%%%%:  741-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE12_M_rightmostEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE12_M_rightmostEv called 0 returned 0% blocks executed 0%
    #####:  740:      _M_rightmost() _GLIBCXX_NOEXCEPT
    #####:  741:      { return this->_M_impl._M_header._M_right; }
    %%%%%:  741-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE12_M_rightmostEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE12_M_rightmostEv called 504 returned 100% blocks executed 100%
      504:  740:      _M_rightmost() _GLIBCXX_NOEXCEPT
      504:  741:      { return this->_M_impl._M_header._M_right; }
      504:  741-block  0
------------------
        -:  742:
        -:  743:      _Const_Base_ptr
        -:  744:      _M_rightmost() const _GLIBCXX_NOEXCEPT
        -:  745:      { return this->_M_impl._M_header._M_right; }
        -:  746:
        -:  747:      _Link_type
     5830:  748:      _M_begin() _GLIBCXX_NOEXCEPT
     5830:  749:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_beginEv called 583 returned 100% blocks executed 100%
      583:  748:      _M_begin() _GLIBCXX_NOEXCEPT
      583:  749:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      583:  749-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_M_beginEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_M_beginEv called 829 returned 100% blocks executed 100%
      829:  748:      _M_begin() _GLIBCXX_NOEXCEPT
      829:  749:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
      829:  749-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_beginEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_beginEv called 2987 returned 100% blocks executed 100%
     2987:  748:      _M_begin() _GLIBCXX_NOEXCEPT
     2987:  749:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
     2987:  749-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv called 1431 returned 100% blocks executed 100%
     1431:  748:      _M_begin() _GLIBCXX_NOEXCEPT
     1431:  749:      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
     1431:  749-block  0
------------------
        -:  750:
        -:  751:      _Const_Link_type
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_beginEv called 412 returned 100% blocks executed 100%
      412:  752:      _M_begin() const _GLIBCXX_NOEXCEPT
        -:  753:      {
        -:  754:	return static_cast<_Const_Link_type>
      412:  755:	  (this->_M_impl._M_header._M_parent);
      412:  755-block  0
        -:  756:      }
        -:  757:
        -:  758:      _Base_ptr
     7550:  759:      _M_end() _GLIBCXX_NOEXCEPT
     7550:  760:      { return &this->_M_impl._M_header; }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_M_endEv called 697 returned 100% blocks executed 100%
      697:  759:      _M_end() _GLIBCXX_NOEXCEPT
      697:  760:      { return &this->_M_impl._M_header; }
      697:  760-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_M_endEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_M_endEv called 897 returned 100% blocks executed 100%
      897:  759:      _M_end() _GLIBCXX_NOEXCEPT
      897:  760:      { return &this->_M_impl._M_header; }
      897:  760-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_M_endEv called 1547 returned 100% blocks executed 100%
     1547:  759:      _M_end() _GLIBCXX_NOEXCEPT
     1547:  760:      { return &this->_M_impl._M_header; }
     1547:  760-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_M_endEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_M_endEv called 4409 returned 100% blocks executed 100%
     4409:  759:      _M_end() _GLIBCXX_NOEXCEPT
     4409:  760:      { return &this->_M_impl._M_header; }
     4409:  760-block  0
------------------
        -:  761:
        -:  762:      _Const_Base_ptr
        -:  763:      _M_end() const _GLIBCXX_NOEXCEPT
        -:  764:      { return &this->_M_impl._M_header; }
        -:  765:
        -:  766:      static const _Key&
    22812:  767:      _S_key(_Const_Link_type __x)
        -:  768:      {
        -:  769:#if __cplusplus >= 201103L
        -:  770:	// If we're asking for the key we're presumably using the comparison
        -:  771:	// object, and so this is a good place to sanity check it.
        -:  772:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  773:		      "comparison object must be invocable "
        -:  774:		      "with two arguments of key type");
        -:  775:# if __cplusplus >= 201703L
        -:  776:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  777:	// 2542. Missing const requirements for associative containers
        -:  778:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  779:	  static_assert(
        -:  780:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  781:	      "comparison object must be invocable as const");
        -:  782:# endif // C++17
        -:  783:#endif // C++11
        -:  784:
    22812:  785:	return _KeyOfValue()(*__x->_M_valptr());
        -:  786:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt13_Rb_tree_nodeIiE called 1547 returned 100% blocks executed 100%
     1547:  767:      _S_key(_Const_Link_type __x)
        -:  768:      {
        -:  769:#if __cplusplus >= 201103L
        -:  770:	// If we're asking for the key we're presumably using the comparison
        -:  771:	// object, and so this is a good place to sanity check it.
        -:  772:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  773:		      "comparison object must be invocable "
        -:  774:		      "with two arguments of key type");
        -:  775:# if __cplusplus >= 201703L
        -:  776:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  777:	// 2542. Missing const requirements for associative containers
        -:  778:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  779:	  static_assert(
        -:  780:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  781:	      "comparison object must be invocable as const");
        -:  782:# endif // C++17
        -:  783:#endif // C++11
        -:  784:
     1547:  785:	return _KeyOfValue()(*__x->_M_valptr());
     1547:  785-block  0
call    0 returned 1547
call    1 returned 1547
        -:  786:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E called 1109 returned 100% blocks executed 100%
     1109:  767:      _S_key(_Const_Link_type __x)
        -:  768:      {
        -:  769:#if __cplusplus >= 201103L
        -:  770:	// If we're asking for the key we're presumably using the comparison
        -:  771:	// object, and so this is a good place to sanity check it.
        -:  772:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  773:		      "comparison object must be invocable "
        -:  774:		      "with two arguments of key type");
        -:  775:# if __cplusplus >= 201703L
        -:  776:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  777:	// 2542. Missing const requirements for associative containers
        -:  778:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  779:	  static_assert(
        -:  780:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  781:	      "comparison object must be invocable as const");
        -:  782:# endif // C++17
        -:  783:#endif // C++11
        -:  784:
     1109:  785:	return _KeyOfValue()(*__x->_M_valptr());
     1109:  785-block  0
call    0 returned 1109
call    1 returned 1109
        -:  786:      }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E called 16955 returned 100% blocks executed 100%
    16955:  767:      _S_key(_Const_Link_type __x)
        -:  768:      {
        -:  769:#if __cplusplus >= 201103L
        -:  770:	// If we're asking for the key we're presumably using the comparison
        -:  771:	// object, and so this is a good place to sanity check it.
        -:  772:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  773:		      "comparison object must be invocable "
        -:  774:		      "with two arguments of key type");
        -:  775:# if __cplusplus >= 201703L
        -:  776:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  777:	// 2542. Missing const requirements for associative containers
        -:  778:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  779:	  static_assert(
        -:  780:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  781:	      "comparison object must be invocable as const");
        -:  782:# endif // C++17
        -:  783:#endif // C++11
        -:  784:
    16955:  785:	return _KeyOfValue()(*__x->_M_valptr());
    16955:  785-block  0
call    0 returned 16955
call    1 returned 16955
        -:  786:      }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E called 3201 returned 100% blocks executed 100%
     3201:  767:      _S_key(_Const_Link_type __x)
        -:  768:      {
        -:  769:#if __cplusplus >= 201103L
        -:  770:	// If we're asking for the key we're presumably using the comparison
        -:  771:	// object, and so this is a good place to sanity check it.
        -:  772:	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        -:  773:		      "comparison object must be invocable "
        -:  774:		      "with two arguments of key type");
        -:  775:# if __cplusplus >= 201703L
        -:  776:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  777:	// 2542. Missing const requirements for associative containers
        -:  778:	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
        -:  779:	  static_assert(
        -:  780:	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
        -:  781:	      "comparison object must be invocable as const");
        -:  782:# endif // C++17
        -:  783:#endif // C++11
        -:  784:
     3201:  785:	return _KeyOfValue()(*__x->_M_valptr());
     3201:  785-block  0
call    0 returned 3201
call    1 returned 3201
        -:  786:      }
------------------
        -:  787:
        -:  788:      static _Link_type
     7545:  789:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     7545:  790:      { return static_cast<_Link_type>(__x->_M_left); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base called 647 returned 100% blocks executed 100%
      647:  789:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      647:  790:      { return static_cast<_Link_type>(__x->_M_left); }
      647:  790-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base called 1104 returned 100% blocks executed 100%
     1104:  789:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1104:  790:      { return static_cast<_Link_type>(__x->_M_left); }
     1104:  790-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base called 4832 returned 100% blocks executed 100%
     4832:  789:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     4832:  790:      { return static_cast<_Link_type>(__x->_M_left); }
     4832:  790-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPSt18_Rb_tree_node_base called 962 returned 100% blocks executed 100%
      962:  789:      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      962:  790:      { return static_cast<_Link_type>(__x->_M_left); }
      962:  790-block  0
------------------
        -:  791:
        -:  792:      static _Const_Link_type
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_S_leftEPKSt18_Rb_tree_node_base called 441 returned 100% blocks executed 100%
      441:  793:      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
      441:  794:      { return static_cast<_Const_Link_type>(__x->_M_left); }
      441:  794-block  0
        -:  795:
        -:  796:      static _Link_type
    14292:  797:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    14292:  798:      { return static_cast<_Link_type>(__x->_M_right); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base called 576 returned 100% blocks executed 100%
      576:  797:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      576:  798:      { return static_cast<_Link_type>(__x->_M_right); }
      576:  798-block  0
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base called 1920 returned 100% blocks executed 100%
     1920:  797:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1920:  798:      { return static_cast<_Link_type>(__x->_M_right); }
     1920:  798-block  0
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base called 10562 returned 100% blocks executed 100%
    10562:  797:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
    10562:  798:      { return static_cast<_Link_type>(__x->_M_right); }
    10562:  798-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPSt18_Rb_tree_node_base called 1234 returned 100% blocks executed 100%
     1234:  797:      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
     1234:  798:      { return static_cast<_Link_type>(__x->_M_right); }
     1234:  798-block  0
------------------
        -:  799:
        -:  800:      static _Const_Link_type
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_S_rightEPKSt18_Rb_tree_node_base called 16 returned 100% blocks executed 100%
       16:  801:      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
       16:  802:      { return static_cast<_Const_Link_type>(__x->_M_right); }
       16:  802-block  0
        -:  803:
        -:  804:      static const _Key&
     2330:  805:      _S_key(_Const_Base_ptr __x)
     2330:  806:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base called 228 returned 100% blocks executed 100%
      228:  805:      _S_key(_Const_Base_ptr __x)
      228:  806:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
      228:  806-block  0
call    0 returned 228
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base called 1320 returned 100% blocks executed 100%
     1320:  805:      _S_key(_Const_Base_ptr __x)
     1320:  806:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
     1320:  806-block  0
call    0 returned 1320
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base called 327 returned 100% blocks executed 100%
      327:  805:      _S_key(_Const_Base_ptr __x)
      327:  806:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
      327:  806-block  0
call    0 returned 327
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE6_S_keyEPKSt18_Rb_tree_node_base called 455 returned 100% blocks executed 100%
      455:  805:      _S_key(_Const_Base_ptr __x)
      455:  806:      { return _S_key(static_cast<_Const_Link_type>(__x)); }
      455:  806-block  0
call    0 returned 455
------------------
        -:  807:
        -:  808:      static _Base_ptr
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_S_minimumEPSt18_Rb_tree_node_base called 412 returned 100% blocks executed 100%
      412:  809:      _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      412:  810:      { return _Rb_tree_node_base::_S_minimum(__x); }
      412:  810-block  0
call    0 returned 412
        -:  811:
        -:  812:      static _Const_Base_ptr
        -:  813:      _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  814:      { return _Rb_tree_node_base::_S_minimum(__x); }
        -:  815:
        -:  816:      static _Base_ptr
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_S_maximumEPSt18_Rb_tree_node_base called 412 returned 100% blocks executed 100%
      412:  817:      _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
      412:  818:      { return _Rb_tree_node_base::_S_maximum(__x); }
      412:  818-block  0
call    0 returned 412
        -:  819:
        -:  820:      static _Const_Base_ptr
        -:  821:      _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
        -:  822:      { return _Rb_tree_node_base::_S_maximum(__x); }
        -:  823:
        -:  824:    public:
        -:  825:      typedef _Rb_tree_iterator<value_type>       iterator;
        -:  826:      typedef _Rb_tree_const_iterator<value_type> const_iterator;
        -:  827:
        -:  828:      typedef std::reverse_iterator<iterator>       reverse_iterator;
        -:  829:      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
        -:  830:
        -:  831:#if __cplusplus > 201402L
        -:  832:      using node_type = _Node_handle<_Key, _Val, _Node_allocator>;
        -:  833:      using insert_return_type = _Node_insert_return<
        -:  834:	conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,
        -:  835:	node_type>;
        -:  836:#endif
        -:  837:
        -:  838:      pair<_Base_ptr, _Base_ptr>
        -:  839:      _M_get_insert_unique_pos(const key_type& __k);
        -:  840:
        -:  841:      pair<_Base_ptr, _Base_ptr>
        -:  842:      _M_get_insert_equal_pos(const key_type& __k);
        -:  843:
        -:  844:      pair<_Base_ptr, _Base_ptr>
        -:  845:      _M_get_insert_hint_unique_pos(const_iterator __pos,
        -:  846:				    const key_type& __k);
        -:  847:
        -:  848:      pair<_Base_ptr, _Base_ptr>
        -:  849:      _M_get_insert_hint_equal_pos(const_iterator __pos,
        -:  850:				   const key_type& __k);
        -:  851:
        -:  852:    private:
        -:  853:#if __cplusplus >= 201103L
        -:  854:      template<typename _Arg, typename _NodeGen>
        -:  855:	iterator
        -:  856:	_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);
        -:  857:
        -:  858:      iterator
        -:  859:      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);
        -:  860:
        -:  861:      template<typename _Arg>
        -:  862:	iterator
        -:  863:	_M_insert_lower(_Base_ptr __y, _Arg&& __v);
        -:  864:
        -:  865:      template<typename _Arg>
        -:  866:	iterator
        -:  867:	_M_insert_equal_lower(_Arg&& __x);
        -:  868:
        -:  869:      iterator
        -:  870:      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);
        -:  871:
        -:  872:      iterator
        -:  873:      _M_insert_equal_lower_node(_Link_type __z);
        -:  874:#else
        -:  875:      template<typename _NodeGen>
        -:  876:	iterator
        -:  877:	_M_insert_(_Base_ptr __x, _Base_ptr __y,
        -:  878:		   const value_type& __v, _NodeGen&);
        -:  879:
        -:  880:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  881:      // 233. Insertion hints in associative containers.
        -:  882:      iterator
        -:  883:      _M_insert_lower(_Base_ptr __y, const value_type& __v);
        -:  884:
        -:  885:      iterator
        -:  886:      _M_insert_equal_lower(const value_type& __x);
        -:  887:#endif
        -:  888:
        -:  889:      template<typename _NodeGen>
        -:  890:	_Link_type
        -:  891:	_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);
        -:  892:
        -:  893:      template<typename _NodeGen>
        -:  894:	_Link_type
      412:  895:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  896:	{
      412:  897:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
      412:  898:	  _M_leftmost() = _S_minimum(__root);
      412:  899:	  _M_rightmost() = _S_maximum(__root);
      412:  900:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
      412:  901:	  return __root;
        -:  902:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiERKS5_RT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiERKS5_RT_ called 345 returned 100% blocks executed 100%
      345:  895:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  896:	{
      345:  897:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
      345:  897-block  0
call    0 returned 345
call    1 returned 345
call    2 returned 345
      345:  898:	  _M_leftmost() = _S_minimum(__root);
call    0 returned 345
call    1 returned 345
      345:  899:	  _M_rightmost() = _S_maximum(__root);
call    0 returned 345
call    1 returned 345
      345:  900:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
      345:  901:	  return __root;
        -:  902:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiERKS5_RT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiERKS5_RT_ called 67 returned 100% blocks executed 100%
       67:  895:	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
        -:  896:	{
       67:  897:	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
       67:  897-block  0
call    0 returned 67
call    1 returned 67
call    2 returned 67
       67:  898:	  _M_leftmost() = _S_minimum(__root);
call    0 returned 67
call    1 returned 67
       67:  899:	  _M_rightmost() = _S_maximum(__root);
call    0 returned 67
call    1 returned 67
       67:  900:	  _M_impl._M_node_count = __x._M_impl._M_node_count;
       67:  901:	  return __root;
        -:  902:	}
------------------
        -:  903:
        -:  904:      _Link_type
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyERKS5_ called 345 returned 100% blocks executed 100%
      345:  905:      _M_copy(const _Rb_tree& __x)
        -:  906:      {
      345:  907:	_Alloc_node __an(*this);
      345:  907-block  0
call    0 returned 345
      690:  908:	return _M_copy(__x, __an);
call    0 returned 345
branch  1 taken 345 (fallthrough)
branch  2 taken 0 (throw)
      345:  908-block  0
      345:  908-block  1
        -:  909:      }
        -:  910:
        -:  911:      void
        -:  912:      _M_erase(_Link_type __x);
        -:  913:
        -:  914:      iterator
        -:  915:      _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -:  916:		     const _Key& __k);
        -:  917:
        -:  918:      const_iterator
        -:  919:      _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -:  920:		     const _Key& __k) const;
        -:  921:
        -:  922:      iterator
        -:  923:      _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -:  924:		     const _Key& __k);
        -:  925:
        -:  926:      const_iterator
        -:  927:      _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -:  928:		     const _Key& __k) const;
        -:  929:
        -:  930:    public:
        -:  931:      // allocation/deallocation
        -:  932:#if __cplusplus < 201103L
        -:  933:      _Rb_tree() { }
        -:  934:#else
      571:  935:      _Rb_tree() = default;
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EEC2Ev:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EEC2Ev called 57 returned 100% blocks executed 100%
       57:  935:      _Rb_tree() = default;
       57:  935-block  0
call    0 returned 57
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EEC2Ev:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EEC2Ev called 7 returned 100% blocks executed 100%
        7:  935:      _Rb_tree() = default;
        7:  935-block  0
call    0 returned 7
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC2Ev:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC2Ev called 405 returned 100% blocks executed 100%
      405:  935:      _Rb_tree() = default;
      405:  935-block  0
call    0 returned 405
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EEC2Ev:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EEC2Ev called 102 returned 100% blocks executed 100%
      102:  935:      _Rb_tree() = default;
      102:  935-block  0
call    0 returned 102
------------------
        -:  936:#endif
        -:  937:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC2ERKS3_RKS4_ called 14 returned 100% blocks executed 71%
       14:  938:      _Rb_tree(const _Compare& __comp,
        -:  939:	       const allocator_type& __a = allocator_type())
       14:  940:      : _M_impl(__comp, _Node_allocator(__a)) { }
       14:  940-block  0
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
       14:  940-block  1
call    4 returned 14
    $$$$$:  940-block  2
call    5 never executed
        -:  941:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC2ERKS5_ called 345 returned 100% blocks executed 89%
      345:  942:      _Rb_tree(const _Rb_tree& __x)
      345:  943:      : _M_impl(__x._M_impl)
      345:  943-block  0
call    0 returned 345
    $$$$$:  943-block  1
call    1 never executed
        -:  944:      {
      345:  945:	if (__x._M_root() != 0)
call    0 returned 345
branch  1 taken 345 (fallthrough)
branch  2 taken 0
      345:  946:	  _M_root() = _M_copy(__x);
      345:  946-block  0
call    0 returned 345
branch  1 taken 345 (fallthrough)
branch  2 taken 0 (throw)
      345:  946-block  1
call    3 returned 345
      345:  947:      }
      345:  947-block  0
        -:  948:
        -:  949:#if __cplusplus >= 201103L
        -:  950:      _Rb_tree(const allocator_type& __a)
        -:  951:      : _M_impl(_Node_allocator(__a))
        -:  952:      { }
        -:  953:
        -:  954:      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
        -:  955:      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
        -:  956:      {
        -:  957:	if (__x._M_root() != nullptr)
        -:  958:	  _M_root() = _M_copy(__x);
        -:  959:      }
        -:  960:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEC2EOS5_ called 7 returned 100% blocks executed 100%
        7:  961:      _Rb_tree(_Rb_tree&&) = default;
        7:  961-block  0
call    0 returned 7
        -:  962:
        -:  963:      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
        -:  964:      : _Rb_tree(std::move(__x), _Node_allocator(__a))
        -:  965:      { }
        -:  966:
        -:  967:    private:
        -:  968:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)
        -:  969:      noexcept(is_nothrow_default_constructible<_Compare>::value)
        -:  970:      : _M_impl(std::move(__x._M_impl), std::move(__a))
        -:  971:      { }
        -:  972:
        -:  973:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)
        -:  974:      : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
        -:  975:      {
        -:  976:	if (__x._M_root() != nullptr)
        -:  977:	  _M_move_data(__x, false_type{});
        -:  978:      }
        -:  979:
        -:  980:    public:
        -:  981:      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
        -:  982:      noexcept( noexcept(
        -:  983:	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
        -:  984:		 std::declval<typename _Alloc_traits::is_always_equal>())) )
        -:  985:      : _Rb_tree(std::move(__x), std::move(__a),
        -:  986:		 typename _Alloc_traits::is_always_equal{})
        -:  987:      { }
        -:  988:#endif
        -:  989:
     733*:  990:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
     733*:  991:      { _M_erase(_M_begin()); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EED2Ev:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EED2Ev called 57 returned 100% blocks executed 100%
       57:  990:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
       57:  991:      { _M_erase(_M_begin()); }
       57:  991-block  0
call    0 returned 57
call    1 returned 57
call    2 returned 57
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EED2Ev:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EED2Ev called 7 returned 100% blocks executed 100%
        7:  990:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
        7:  991:      { _M_erase(_M_begin()); }
        7:  991-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EED2Ev:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EED2Ev called 0 returned 0% blocks executed 0%
    #####:  990:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
    #####:  991:      { _M_erase(_M_begin()); }
    %%%%%:  991-block  0
call    0 never executed
call    1 never executed
call    2 never executed
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED2Ev:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEED2Ev called 669 returned 100% blocks executed 100%
      669:  990:      ~_Rb_tree() _GLIBCXX_NOEXCEPT
      669:  991:      { _M_erase(_M_begin()); }
      669:  991-block  0
call    0 returned 669
call    1 returned 669
call    2 returned 669
------------------
        -:  992:
        -:  993:      _Rb_tree&
        -:  994:      operator=(const _Rb_tree& __x);
        -:  995:
        -:  996:      // Accessors.
        -:  997:      _Compare
      855:  998:      key_comp() const
      855:  999:      { return _M_impl._M_key_compare; }
------------------
_ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8key_compEv:
function _ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8key_compEv called 355 returned 100% blocks executed 100%
      355:  998:      key_comp() const
      355:  999:      { return _M_impl._M_key_compare; }
      355:  999-block  0
------------------
_ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8key_compEv:
function _ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8key_compEv called 500 returned 100% blocks executed 100%
      500:  998:      key_comp() const
      500:  999:      { return _M_impl._M_key_compare; }
      500:  999-block  0
------------------
        -: 1000:
        -: 1001:      iterator
      460: 1002:      begin() _GLIBCXX_NOEXCEPT
      460: 1003:      { return iterator(this->_M_impl._M_header._M_left); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE5beginEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE5beginEv called 57 returned 100% blocks executed 100%
       57: 1002:      begin() _GLIBCXX_NOEXCEPT
       57: 1003:      { return iterator(this->_M_impl._M_header._M_left); }
       57: 1003-block  0
call    0 returned 57
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE5beginEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE5beginEv called 26 returned 100% blocks executed 100%
       26: 1002:      begin() _GLIBCXX_NOEXCEPT
       26: 1003:      { return iterator(this->_M_impl._M_header._M_left); }
       26: 1003-block  0
call    0 returned 26
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv called 296 returned 100% blocks executed 100%
      296: 1002:      begin() _GLIBCXX_NOEXCEPT
      296: 1003:      { return iterator(this->_M_impl._M_header._M_left); }
      296: 1003-block  0
call    0 returned 296
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE5beginEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE5beginEv called 81 returned 100% blocks executed 100%
       81: 1002:      begin() _GLIBCXX_NOEXCEPT
       81: 1003:      { return iterator(this->_M_impl._M_header._M_left); }
       81: 1003-block  0
call    0 returned 81
------------------
        -: 1004:
        -: 1005:      const_iterator
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5beginEv called 7595 returned 100% blocks executed 100%
     7595: 1006:      begin() const _GLIBCXX_NOEXCEPT
     7595: 1007:      { return const_iterator(this->_M_impl._M_header._M_left); }
     7595: 1007-block  0
call    0 returned 7595
        -: 1008:
        -: 1009:      iterator
     2708: 1010:      end() _GLIBCXX_NOEXCEPT
     2708: 1011:      { return iterator(&this->_M_impl._M_header); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE3endEv:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE3endEv called 355 returned 100% blocks executed 100%
      355: 1010:      end() _GLIBCXX_NOEXCEPT
      355: 1011:      { return iterator(&this->_M_impl._M_header); }
      355: 1011-block  0
call    0 returned 355
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv called 818 returned 100% blocks executed 100%
      818: 1010:      end() _GLIBCXX_NOEXCEPT
      818: 1011:      { return iterator(&this->_M_impl._M_header); }
      818: 1011-block  0
call    0 returned 818
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE3endEv:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE3endEv called 427 returned 100% blocks executed 100%
      427: 1010:      end() _GLIBCXX_NOEXCEPT
      427: 1011:      { return iterator(&this->_M_impl._M_header); }
      427: 1011-block  0
call    0 returned 427
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE3endEv:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE3endEv called 1108 returned 100% blocks executed 100%
     1108: 1010:      end() _GLIBCXX_NOEXCEPT
     1108: 1011:      { return iterator(&this->_M_impl._M_header); }
     1108: 1011-block  0
call    0 returned 1108
------------------
        -: 1012:
        -: 1013:      const_iterator
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE3endEv called 8124 returned 100% blocks executed 100%
     8124: 1014:      end() const _GLIBCXX_NOEXCEPT
     8124: 1015:      { return const_iterator(&this->_M_impl._M_header); }
     8124: 1015-block  0
call    0 returned 8124
        -: 1016:
        -: 1017:      reverse_iterator
        -: 1018:      rbegin() _GLIBCXX_NOEXCEPT
        -: 1019:      { return reverse_iterator(end()); }
        -: 1020:
        -: 1021:      const_reverse_iterator
        -: 1022:      rbegin() const _GLIBCXX_NOEXCEPT
        -: 1023:      { return const_reverse_iterator(end()); }
        -: 1024:
        -: 1025:      reverse_iterator
        -: 1026:      rend() _GLIBCXX_NOEXCEPT
        -: 1027:      { return reverse_iterator(begin()); }
        -: 1028:
        -: 1029:      const_reverse_iterator
        -: 1030:      rend() const _GLIBCXX_NOEXCEPT
        -: 1031:      { return const_reverse_iterator(begin()); }
        -: 1032:
        -: 1033:      _GLIBCXX_NODISCARD bool
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5emptyEv called 303 returned 100% blocks executed 100%
      303: 1034:      empty() const _GLIBCXX_NOEXCEPT
      303: 1035:      { return _M_impl._M_node_count == 0; }
      303: 1035-block  0
        -: 1036:
        -: 1037:      size_type
     385*: 1038:      size() const _GLIBCXX_NOEXCEPT
     385*: 1039:      { return _M_impl._M_node_count; }
------------------
_ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE4sizeEv:
function _ZNKSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE4sizeEv called 346 returned 100% blocks executed 100%
      346: 1038:      size() const _GLIBCXX_NOEXCEPT
      346: 1039:      { return _M_impl._M_node_count; }
      346: 1039-block  0
------------------
_ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4sizeEv:
function _ZNKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE4sizeEv called 39 returned 100% blocks executed 100%
       39: 1038:      size() const _GLIBCXX_NOEXCEPT
       39: 1039:      { return _M_impl._M_node_count; }
       39: 1039-block  0
------------------
_ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE4sizeEv:
function _ZNKSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1038:      size() const _GLIBCXX_NOEXCEPT
    #####: 1039:      { return _M_impl._M_node_count; }
    %%%%%: 1039-block  0
------------------
_ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE4sizeEv:
function _ZNKSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE4sizeEv called 0 returned 0% blocks executed 0%
    #####: 1038:      size() const _GLIBCXX_NOEXCEPT
    #####: 1039:      { return _M_impl._M_node_count; }
    %%%%%: 1039-block  0
------------------
        -: 1040:
        -: 1041:      size_type
        -: 1042:      max_size() const _GLIBCXX_NOEXCEPT
        -: 1043:      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
        -: 1044:
        -: 1045:      void
        -: 1046:      swap(_Rb_tree& __t)
        -: 1047:      _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
        -: 1048:
        -: 1049:      // Insert/erase.
        -: 1050:#if __cplusplus >= 201103L
        -: 1051:      template<typename _Arg>
        -: 1052:	pair<iterator, bool>
        -: 1053:	_M_insert_unique(_Arg&& __x);
        -: 1054:
        -: 1055:      template<typename _Arg>
        -: 1056:	iterator
        -: 1057:	_M_insert_equal(_Arg&& __x);
        -: 1058:
        -: 1059:      template<typename _Arg, typename _NodeGen>
        -: 1060:	iterator
        -: 1061:	_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);
        -: 1062:
        -: 1063:      template<typename _Arg>
        -: 1064:	iterator
        -: 1065:	_M_insert_unique_(const_iterator __pos, _Arg&& __x)
        -: 1066:	{
        -: 1067:	  _Alloc_node __an(*this);
        -: 1068:	  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
        -: 1069:	}
        -: 1070:
        -: 1071:      template<typename _Arg, typename _NodeGen>
        -: 1072:	iterator
        -: 1073:	_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);
        -: 1074:
        -: 1075:      template<typename _Arg>
        -: 1076:	iterator
        -: 1077:	_M_insert_equal_(const_iterator __pos, _Arg&& __x)
        -: 1078:	{
        -: 1079:	  _Alloc_node __an(*this);
        -: 1080:	  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
        -: 1081:	}
        -: 1082:
        -: 1083:      template<typename... _Args>
        -: 1084:	pair<iterator, bool>
        -: 1085:	_M_emplace_unique(_Args&&... __args);
        -: 1086:
        -: 1087:      template<typename... _Args>
        -: 1088:	iterator
        -: 1089:	_M_emplace_equal(_Args&&... __args);
        -: 1090:
        -: 1091:      template<typename... _Args>
        -: 1092:	iterator
        -: 1093:	_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);
        -: 1094:
        -: 1095:      template<typename... _Args>
        -: 1096:	iterator
        -: 1097:	_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
        -: 1098:
        -: 1099:      template<typename _Iter>
        -: 1100:	using __same_value_type
        -: 1101:	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;
        -: 1102:
        -: 1103:      template<typename _InputIterator>
        -: 1104:	__enable_if_t<__same_value_type<_InputIterator>::value>
       28: 1105:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1106:	{
       28: 1107:	  _Alloc_node __an(*this);
       56: 1108:	  for (; __first != __last; ++__first)
       28: 1109:	    _M_insert_unique_(end(), *__first, __an);
       28: 1110:	}
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE22_M_insert_range_uniqueISt23_Rb_tree_const_iteratorIiEEENSt9enable_ifIXsrSt7is_sameIiNSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESC_SC_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE22_M_insert_range_uniqueISt23_Rb_tree_const_iteratorIiEEENSt9enable_ifIXsrSt7is_sameIiNSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESC_SC_ called 14 returned 100% blocks executed 83%
       14: 1105:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1106:	{
       14: 1107:	  _Alloc_node __an(*this);
       14: 1107-block  0
call    0 returned 14
       28: 1108:	  for (; __first != __last; ++__first)
       28: 1108-block  0
call    0 returned 28
branch  1 taken 14 (fallthrough)
branch  2 taken 14
       14: 1109:	    _M_insert_unique_(end(), *__first, __an);
       14: 1109-block  0
call    0 returned 14
call    1 returned 14
call    2 returned 14
call    3 returned 14
branch  4 taken 14 (fallthrough)
branch  5 taken 0 (throw)
       14: 1109-block  1
call    6 returned 14
    $$$$$: 1109-block  2
    $$$$$: 1109-block  3
       14: 1110:	}
       14: 1110-block  0
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE22_M_insert_range_uniqueIPKiEENSt9enable_ifIXsrSt7is_sameIiNSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESC_SC_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE22_M_insert_range_uniqueIPKiEENSt9enable_ifIXsrSt7is_sameIiNSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESC_SC_ called 14 returned 100% blocks executed 80%
       14: 1105:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1106:	{
       14: 1107:	  _Alloc_node __an(*this);
       14: 1107-block  0
call    0 returned 14
       28: 1108:	  for (; __first != __last; ++__first)
       28: 1108-block  0
branch  0 taken 14 (fallthrough)
branch  1 taken 14
       14: 1109:	    _M_insert_unique_(end(), *__first, __an);
       14: 1109-block  0
call    0 returned 14
call    1 returned 14
call    2 returned 14
branch  3 taken 14 (fallthrough)
branch  4 taken 0 (throw)
       14: 1109-block  1
    $$$$$: 1109-block  2
    $$$$$: 1109-block  3
       14: 1110:	}
       14: 1110-block  0
------------------
        -: 1111:
        -: 1112:      template<typename _InputIterator>
        -: 1113:	__enable_if_t<!__same_value_type<_InputIterator>::value>
        -: 1114:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1115:	{
        -: 1116:	  for (; __first != __last; ++__first)
        -: 1117:	    _M_emplace_unique(*__first);
        -: 1118:	}
        -: 1119:
        -: 1120:      template<typename _InputIterator>
        -: 1121:	__enable_if_t<__same_value_type<_InputIterator>::value>
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE21_M_insert_range_equalISt17_Rb_tree_iteratorIS3_EEENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_ called 81 returned 100% blocks executed 83%
       81: 1122:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1123:	{
       81: 1124:	  _Alloc_node __an(*this);
       81: 1124-block  0
call    0 returned 81
      427: 1125:	  for (; __first != __last; ++__first)
      427: 1125-block  0
call    0 returned 427
branch  1 taken 346 (fallthrough)
branch  2 taken 81
      346: 1126:	    _M_insert_equal_(end(), *__first, __an);
      346: 1126-block  0
call    0 returned 346
call    1 returned 346
call    2 returned 346
call    3 returned 346
branch  4 taken 346 (fallthrough)
branch  5 taken 0 (throw)
      346: 1126-block  1
call    6 returned 346
    $$$$$: 1126-block  2
    $$$$$: 1126-block  3
       81: 1127:	}
       81: 1127-block  0
        -: 1128:
        -: 1129:      template<typename _InputIterator>
        -: 1130:	__enable_if_t<!__same_value_type<_InputIterator>::value>
        -: 1131:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1132:	{
        -: 1133:	  _Alloc_node __an(*this);
        -: 1134:	  for (; __first != __last; ++__first)
        -: 1135:	    _M_emplace_equal(*__first);
        -: 1136:	}
        -: 1137:#else
        -: 1138:      pair<iterator, bool>
        -: 1139:      _M_insert_unique(const value_type& __x);
        -: 1140:
        -: 1141:      iterator
        -: 1142:      _M_insert_equal(const value_type& __x);
        -: 1143:
        -: 1144:      template<typename _NodeGen>
        -: 1145:	iterator
        -: 1146:	_M_insert_unique_(const_iterator __pos, const value_type& __x,
        -: 1147:			  _NodeGen&);
        -: 1148:
        -: 1149:      iterator
        -: 1150:      _M_insert_unique_(const_iterator __pos, const value_type& __x)
        -: 1151:      {
        -: 1152:	_Alloc_node __an(*this);
        -: 1153:	return _M_insert_unique_(__pos, __x, __an);
        -: 1154:      }
        -: 1155:
        -: 1156:      template<typename _NodeGen>
        -: 1157:	iterator
        -: 1158:	_M_insert_equal_(const_iterator __pos, const value_type& __x,
        -: 1159:			 _NodeGen&);
        -: 1160:      iterator
        -: 1161:      _M_insert_equal_(const_iterator __pos, const value_type& __x)
        -: 1162:      {
        -: 1163:	_Alloc_node __an(*this);
        -: 1164:	return _M_insert_equal_(__pos, __x, __an);
        -: 1165:      }
        -: 1166:
        -: 1167:      template<typename _InputIterator>
        -: 1168:	void
        -: 1169:	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
        -: 1170:	{
        -: 1171:	  _Alloc_node __an(*this);
        -: 1172:	  for (; __first != __last; ++__first)
        -: 1173:	    _M_insert_unique_(end(), *__first, __an);
        -: 1174:	}
        -: 1175:
        -: 1176:      template<typename _InputIterator>
        -: 1177:	void
        -: 1178:	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
        -: 1179:	{
        -: 1180:	  _Alloc_node __an(*this);
        -: 1181:	  for (; __first != __last; ++__first)
        -: 1182:	    _M_insert_equal_(end(), *__first, __an);
        -: 1183:	}
        -: 1184:#endif
        -: 1185:
        -: 1186:    private:
        -: 1187:      void
        -: 1188:      _M_erase_aux(const_iterator __position);
        -: 1189:
        -: 1190:      void
        -: 1191:      _M_erase_aux(const_iterator __first, const_iterator __last);
        -: 1192:
        -: 1193:    public:
        -: 1194:#if __cplusplus >= 201103L
        -: 1195:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1196:      // DR 130. Associative erase should return an iterator.
        -: 1197:      _GLIBCXX_ABI_TAG_CXX11
        -: 1198:      iterator
        -: 1199:      erase(const_iterator __position)
        -: 1200:      {
        -: 1201:	__glibcxx_assert(__position != end());
        -: 1202:	const_iterator __result = __position;
        -: 1203:	++__result;
        -: 1204:	_M_erase_aux(__position);
        -: 1205:	return __result._M_const_cast();
        -: 1206:      }
        -: 1207:
        -: 1208:      // LWG 2059.
        -: 1209:      _GLIBCXX_ABI_TAG_CXX11
        -: 1210:      iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE5eraseB5cxx11ESt17_Rb_tree_iteratorIS3_E called 197 returned 100% blocks executed 100%
      197: 1211:      erase(iterator __position)
        -: 1212:      {
        -: 1213:	__glibcxx_assert(__position != end());
      197: 1214:	iterator __result = __position;
      197: 1215:	++__result;
      197: 1215-block  0
call    0 returned 197
      197: 1216:	_M_erase_aux(__position);
call    0 returned 197
call    1 returned 197
      197: 1217:	return __result;
        -: 1218:      }
        -: 1219:#else
        -: 1220:      void
        -: 1221:      erase(iterator __position)
        -: 1222:      {
        -: 1223:	__glibcxx_assert(__position != end());
        -: 1224:	_M_erase_aux(__position);
        -: 1225:      }
        -: 1226:
        -: 1227:      void
        -: 1228:      erase(const_iterator __position)
        -: 1229:      {
        -: 1230:	__glibcxx_assert(__position != end());
        -: 1231:	_M_erase_aux(__position);
        -: 1232:      }
        -: 1233:#endif
        -: 1234:
        -: 1235:      size_type
        -: 1236:      erase(const key_type& __x);
        -: 1237:
        -: 1238:#if __cplusplus >= 201103L
        -: 1239:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -: 1240:      // DR 130. Associative erase should return an iterator.
        -: 1241:      _GLIBCXX_ABI_TAG_CXX11
        -: 1242:      iterator
        -: 1243:      erase(const_iterator __first, const_iterator __last)
        -: 1244:      {
        -: 1245:	_M_erase_aux(__first, __last);
        -: 1246:	return __last._M_const_cast();
        -: 1247:      }
        -: 1248:#else
        -: 1249:      void
        -: 1250:      erase(iterator __first, iterator __last)
        -: 1251:      { _M_erase_aux(__first, __last); }
        -: 1252:
        -: 1253:      void
        -: 1254:      erase(const_iterator __first, const_iterator __last)
        -: 1255:      { _M_erase_aux(__first, __last); }
        -: 1256:#endif
        -: 1257:
        -: 1258:      void
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5clearEv called 0 returned 0% blocks executed 0%
    #####: 1259:      clear() _GLIBCXX_NOEXCEPT
        -: 1260:      {
    #####: 1261:	_M_erase(_M_begin());
    %%%%%: 1261-block  0
call    0 never executed
call    1 never executed
    #####: 1262:	_M_impl._M_reset();
call    0 never executed
    #####: 1263:      }
        -: 1264:
        -: 1265:      // Set operations.
        -: 1266:      iterator
        -: 1267:      find(const key_type& __k);
        -: 1268:
        -: 1269:      const_iterator
        -: 1270:      find(const key_type& __k) const;
        -: 1271:
        -: 1272:      size_type
        -: 1273:      count(const key_type& __k) const;
        -: 1274:
        -: 1275:      iterator
     1941: 1276:      lower_bound(const key_type& __k)
     1941: 1277:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11lower_boundERS1_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE11lower_boundERS1_ called 355 returned 100% blocks executed 100%
      355: 1276:      lower_bound(const key_type& __k)
      355: 1277:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
      355: 1277-block  0
call    0 returned 355
call    1 returned 355
call    2 returned 355
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11lower_boundERS6_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE11lower_boundERS6_ called 500 returned 100% blocks executed 100%
      500: 1276:      lower_bound(const key_type& __k)
      500: 1277:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
      500: 1277-block  0
call    0 returned 500
call    1 returned 500
call    2 returned 500
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11lower_boundERS1_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11lower_boundERS1_ called 1086 returned 100% blocks executed 100%
     1086: 1276:      lower_bound(const key_type& __k)
     1086: 1277:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
     1086: 1277-block  0
call    0 returned 1086
call    1 returned 1086
call    2 returned 1086
------------------
        -: 1278:
        -: 1279:      const_iterator
        -: 1280:      lower_bound(const key_type& __k) const
        -: 1281:      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
        -: 1282:
        -: 1283:      iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE11upper_boundERS1_ called 1086 returned 100% blocks executed 100%
     1086: 1284:      upper_bound(const key_type& __k)
     1086: 1285:      { return _M_upper_bound(_M_begin(), _M_end(), __k); }
     1086: 1285-block  0
call    0 returned 1086
call    1 returned 1086
call    2 returned 1086
        -: 1286:
        -: 1287:      const_iterator
        -: 1288:      upper_bound(const key_type& __k) const
        -: 1289:      { return _M_upper_bound(_M_begin(), _M_end(), __k); }
        -: 1290:
        -: 1291:      pair<iterator, iterator>
        -: 1292:      equal_range(const key_type& __k);
        -: 1293:
        -: 1294:      pair<const_iterator, const_iterator>
        -: 1295:      equal_range(const key_type& __k) const;
        -: 1296:
        -: 1297:#if __cplusplus >= 201402L
        -: 1298:      template<typename _Kt,
        -: 1299:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1300:	iterator
        -: 1301:	_M_find_tr(const _Kt& __k)
        -: 1302:	{
        -: 1303:	  const _Rb_tree* __const_this = this;
        -: 1304:	  return __const_this->_M_find_tr(__k)._M_const_cast();
        -: 1305:	}
        -: 1306:
        -: 1307:      template<typename _Kt,
        -: 1308:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1309:	const_iterator
        -: 1310:	_M_find_tr(const _Kt& __k) const
        -: 1311:	{
        -: 1312:	  auto __j = _M_lower_bound_tr(__k);
        -: 1313:	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
        -: 1314:	    __j = end();
        -: 1315:	  return __j;
        -: 1316:	}
        -: 1317:
        -: 1318:      template<typename _Kt,
        -: 1319:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1320:	size_type
        -: 1321:	_M_count_tr(const _Kt& __k) const
        -: 1322:	{
        -: 1323:	  auto __p = _M_equal_range_tr(__k);
        -: 1324:	  return std::distance(__p.first, __p.second);
        -: 1325:	}
        -: 1326:
        -: 1327:      template<typename _Kt,
        -: 1328:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1329:	iterator
        -: 1330:	_M_lower_bound_tr(const _Kt& __k)
        -: 1331:	{
        -: 1332:	  const _Rb_tree* __const_this = this;
        -: 1333:	  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
        -: 1334:	}
        -: 1335:
        -: 1336:      template<typename _Kt,
        -: 1337:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1338:	const_iterator
        -: 1339:	_M_lower_bound_tr(const _Kt& __k) const
        -: 1340:	{
        -: 1341:	  auto __x = _M_begin();
        -: 1342:	  auto __y = _M_end();
        -: 1343:	  while (__x != 0)
        -: 1344:	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
        -: 1345:	      {
        -: 1346:		__y = __x;
        -: 1347:		__x = _S_left(__x);
        -: 1348:	      }
        -: 1349:	    else
        -: 1350:	      __x = _S_right(__x);
        -: 1351:	  return const_iterator(__y);
        -: 1352:	}
        -: 1353:
        -: 1354:      template<typename _Kt,
        -: 1355:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1356:	iterator
        -: 1357:	_M_upper_bound_tr(const _Kt& __k)
        -: 1358:	{
        -: 1359:	  const _Rb_tree* __const_this = this;
        -: 1360:	  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
        -: 1361:	}
        -: 1362:
        -: 1363:      template<typename _Kt,
        -: 1364:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1365:	const_iterator
        -: 1366:	_M_upper_bound_tr(const _Kt& __k) const
        -: 1367:	{
        -: 1368:	  auto __x = _M_begin();
        -: 1369:	  auto __y = _M_end();
        -: 1370:	  while (__x != 0)
        -: 1371:	    if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 1372:	      {
        -: 1373:		__y = __x;
        -: 1374:		__x = _S_left(__x);
        -: 1375:	      }
        -: 1376:	    else
        -: 1377:	      __x = _S_right(__x);
        -: 1378:	  return const_iterator(__y);
        -: 1379:	}
        -: 1380:
        -: 1381:      template<typename _Kt,
        -: 1382:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1383:	pair<iterator, iterator>
        -: 1384:	_M_equal_range_tr(const _Kt& __k)
        -: 1385:	{
        -: 1386:	  const _Rb_tree* __const_this = this;
        -: 1387:	  auto __ret = __const_this->_M_equal_range_tr(__k);
        -: 1388:	  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
        -: 1389:	}
        -: 1390:
        -: 1391:      template<typename _Kt,
        -: 1392:	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
        -: 1393:	pair<const_iterator, const_iterator>
        -: 1394:	_M_equal_range_tr(const _Kt& __k) const
        -: 1395:	{
        -: 1396:	  auto __low = _M_lower_bound_tr(__k);
        -: 1397:	  auto __high = __low;
        -: 1398:	  auto& __cmp = _M_impl._M_key_compare;
        -: 1399:	  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
        -: 1400:	    ++__high;
        -: 1401:	  return { __low, __high };
        -: 1402:	}
        -: 1403:#endif
        -: 1404:
        -: 1405:      // Debugging.
        -: 1406:      bool
        -: 1407:      __rb_verify() const;
        -: 1408:
        -: 1409:#if __cplusplus >= 201103L
        -: 1410:      _Rb_tree&
        -: 1411:      operator=(_Rb_tree&&)
        -: 1412:      noexcept(_Alloc_traits::_S_nothrow_move()
        -: 1413:	       && is_nothrow_move_assignable<_Compare>::value);
        -: 1414:
        -: 1415:      template<typename _Iterator>
        -: 1416:	void
        -: 1417:	_M_assign_unique(_Iterator, _Iterator);
        -: 1418:
        -: 1419:      template<typename _Iterator>
        -: 1420:	void
        -: 1421:	_M_assign_equal(_Iterator, _Iterator);
        -: 1422:
        -: 1423:    private:
        -: 1424:      // Move elements from container with equal allocator.
        -: 1425:      void
        -: 1426:      _M_move_data(_Rb_tree& __x, true_type)
        -: 1427:      { _M_impl._M_move_data(__x._M_impl); }
        -: 1428:
        -: 1429:      // Move elements from container with possibly non-equal allocator,
        -: 1430:      // which might result in a copy not a move.
        -: 1431:      void
        -: 1432:      _M_move_data(_Rb_tree&, false_type);
        -: 1433:
        -: 1434:      // Move assignment from container with equal allocator.
        -: 1435:      void
        -: 1436:      _M_move_assign(_Rb_tree&, true_type);
        -: 1437:
        -: 1438:      // Move assignment from container with possibly non-equal allocator,
        -: 1439:      // which might result in a copy not a move.
        -: 1440:      void
        -: 1441:      _M_move_assign(_Rb_tree&, false_type);
        -: 1442:#endif
        -: 1443:
        -: 1444:#if __cplusplus > 201402L
        -: 1445:    public:
        -: 1446:      /// Re-insert an extracted node.
        -: 1447:      insert_return_type
        -: 1448:      _M_reinsert_node_unique(node_type&& __nh)
        -: 1449:      {
        -: 1450:	insert_return_type __ret;
        -: 1451:	if (__nh.empty())
        -: 1452:	  __ret.position = end();
        -: 1453:	else
        -: 1454:	  {
        -: 1455:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1456:
        -: 1457:	    auto __res = _M_get_insert_unique_pos(__nh._M_key());
        -: 1458:	    if (__res.second)
        -: 1459:	      {
        -: 1460:		__ret.position
        -: 1461:		  = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1462:		__nh._M_ptr = nullptr;
        -: 1463:		__ret.inserted = true;
        -: 1464:	      }
        -: 1465:	    else
        -: 1466:	      {
        -: 1467:		__ret.node = std::move(__nh);
        -: 1468:		__ret.position = iterator(__res.first);
        -: 1469:		__ret.inserted = false;
        -: 1470:	      }
        -: 1471:	  }
        -: 1472:	return __ret;
        -: 1473:      }
        -: 1474:
        -: 1475:      /// Re-insert an extracted node.
        -: 1476:      iterator
        -: 1477:      _M_reinsert_node_equal(node_type&& __nh)
        -: 1478:      {
        -: 1479:	iterator __ret;
        -: 1480:	if (__nh.empty())
        -: 1481:	  __ret = end();
        -: 1482:	else
        -: 1483:	  {
        -: 1484:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1485:	    auto __res = _M_get_insert_equal_pos(__nh._M_key());
        -: 1486:	    if (__res.second)
        -: 1487:	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1488:	    else
        -: 1489:	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
        -: 1490:	    __nh._M_ptr = nullptr;
        -: 1491:	  }
        -: 1492:	return __ret;
        -: 1493:      }
        -: 1494:
        -: 1495:      /// Re-insert an extracted node.
        -: 1496:      iterator
        -: 1497:      _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)
        -: 1498:      {
        -: 1499:	iterator __ret;
        -: 1500:	if (__nh.empty())
        -: 1501:	  __ret = end();
        -: 1502:	else
        -: 1503:	  {
        -: 1504:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1505:	    auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());
        -: 1506:	    if (__res.second)
        -: 1507:	      {
        -: 1508:		__ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1509:		__nh._M_ptr = nullptr;
        -: 1510:	      }
        -: 1511:	    else
        -: 1512:	      __ret = iterator(__res.first);
        -: 1513:	  }
        -: 1514:	return __ret;
        -: 1515:      }
        -: 1516:
        -: 1517:      /// Re-insert an extracted node.
        -: 1518:      iterator
        -: 1519:      _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)
        -: 1520:      {
        -: 1521:	iterator __ret;
        -: 1522:	if (__nh.empty())
        -: 1523:	  __ret = end();
        -: 1524:	else
        -: 1525:	  {
        -: 1526:	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
        -: 1527:	    auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());
        -: 1528:	    if (__res.second)
        -: 1529:	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
        -: 1530:	    else
        -: 1531:	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
        -: 1532:	    __nh._M_ptr = nullptr;
        -: 1533:	  }
        -: 1534:	return __ret;
        -: 1535:      }
        -: 1536:
        -: 1537:      /// Extract a node.
        -: 1538:      node_type
        -: 1539:      extract(const_iterator __pos)
        -: 1540:      {
        -: 1541:	auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1542:	    __pos._M_const_cast()._M_node, _M_impl._M_header);
        -: 1543:	--_M_impl._M_node_count;
        -: 1544:	return { static_cast<_Link_type>(__ptr), _M_get_Node_allocator() };
        -: 1545:      }
        -: 1546:
        -: 1547:      /// Extract a node.
        -: 1548:      node_type
        -: 1549:      extract(const key_type& __k)
        -: 1550:      {
        -: 1551:	node_type __nh;
        -: 1552:	auto __pos = find(__k);
        -: 1553:	if (__pos != end())
        -: 1554:	  __nh = extract(const_iterator(__pos));
        -: 1555:	return __nh;
        -: 1556:      }
        -: 1557:
        -: 1558:      template<typename _Compare2>
        -: 1559:	using _Compatible_tree
        -: 1560:	  = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;
        -: 1561:
        -: 1562:      template<typename, typename>
        -: 1563:	friend class _Rb_tree_merge_helper;
        -: 1564:
        -: 1565:      /// Merge from a compatible container into one with unique keys.
        -: 1566:      template<typename _Compare2>
        -: 1567:	void
        -: 1568:	_M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept
        -: 1569:	{
        -: 1570:	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
        -: 1571:	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
        -: 1572:	    {
        -: 1573:	      auto __pos = __i++;
        -: 1574:	      auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));
        -: 1575:	      if (__res.second)
        -: 1576:		{
        -: 1577:		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
        -: 1578:		  auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1579:		      __pos._M_node, __src_impl._M_header);
        -: 1580:		  --__src_impl._M_node_count;
        -: 1581:		  _M_insert_node(__res.first, __res.second,
        -: 1582:				 static_cast<_Link_type>(__ptr));
        -: 1583:		}
        -: 1584:	    }
        -: 1585:	}
        -: 1586:
        -: 1587:      /// Merge from a compatible container into one with equivalent keys.
        -: 1588:      template<typename _Compare2>
        -: 1589:	void
        -: 1590:	_M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept
        -: 1591:	{
        -: 1592:	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
        -: 1593:	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
        -: 1594:	    {
        -: 1595:	      auto __pos = __i++;
        -: 1596:	      auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));
        -: 1597:	      if (__res.second)
        -: 1598:		{
        -: 1599:		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
        -: 1600:		  auto __ptr = _Rb_tree_rebalance_for_erase(
        -: 1601:		      __pos._M_node, __src_impl._M_header);
        -: 1602:		  --__src_impl._M_node_count;
        -: 1603:		  _M_insert_node(__res.first, __res.second,
        -: 1604:				 static_cast<_Link_type>(__ptr));
        -: 1605:		}
        -: 1606:	    }
        -: 1607:	}
        -: 1608:#endif // C++17
        -: 1609:
        -: 1610:      friend bool
        -: 1611:      operator==(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1612:      {
        -: 1613:	return __x.size() == __y.size()
        -: 1614:	  && std::equal(__x.begin(), __x.end(), __y.begin());
        -: 1615:      }
        -: 1616:
        -: 1617:#if __cpp_lib_three_way_comparison
        -: 1618:      friend auto
        -: 1619:      operator<=>(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1620:      {
        -: 1621:	if constexpr (requires { typename __detail::__synth3way_t<_Val>; })
        -: 1622:	  return std::lexicographical_compare_three_way(__x.begin(), __x.end(),
        -: 1623:							__y.begin(), __y.end(),
        -: 1624:							__detail::__synth3way);
        -: 1625:      }
        -: 1626:#else
        -: 1627:      friend bool
function _ZStltRKSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEES7_ called 3701 returned 100% blocks executed 100%
     3701: 1628:      operator<(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1629:      {
     3701: 1630:	return std::lexicographical_compare(__x.begin(), __x.end(),
     3701: 1630-block  0
call    0 returned 3701
call    1 returned 3701
call    2 returned 3701
call    3 returned 3701
call    4 returned 3701
     3701: 1631:					    __y.begin(), __y.end());
        -: 1632:      }
        -: 1633:
        -: 1634:      friend bool _GLIBCXX_DEPRECATED
        -: 1635:      operator!=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1636:      { return !(__x == __y); }
        -: 1637:
        -: 1638:      friend bool _GLIBCXX_DEPRECATED
        -: 1639:      operator>(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1640:      { return __y < __x; }
        -: 1641:
        -: 1642:      friend bool _GLIBCXX_DEPRECATED
        -: 1643:      operator<=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1644:      { return !(__y < __x); }
        -: 1645:
        -: 1646:      friend bool _GLIBCXX_DEPRECATED
        -: 1647:      operator>=(const _Rb_tree& __x, const _Rb_tree& __y)
        -: 1648:      { return !(__x < __y); }
        -: 1649:#endif
        -: 1650:    };
        -: 1651:
        -: 1652:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1653:	   typename _Compare, typename _Alloc>
        -: 1654:    inline void
        -: 1655:    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        -: 1656:	 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
        -: 1657:    { __x.swap(__y); }
        -: 1658:
        -: 1659:#if __cplusplus >= 201103L
        -: 1660:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1661:	   typename _Compare, typename _Alloc>
        -: 1662:    void
        -: 1663:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1664:    _M_move_data(_Rb_tree& __x, false_type)
        -: 1665:    {
        -: 1666:      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
        -: 1667:	_M_move_data(__x, true_type());
        -: 1668:      else
        -: 1669:	{
        -: 1670:	  _Alloc_node __an(*this);
        -: 1671:	  auto __lbd =
        -: 1672:	    [&__an](const value_type& __cval)
        -: 1673:	    {
        -: 1674:	      auto& __val = const_cast<value_type&>(__cval);
        -: 1675:	      return __an(std::move_if_noexcept(__val));
        -: 1676:	    };
        -: 1677:	  _M_root() = _M_copy(__x, __lbd);
        -: 1678:	}
        -: 1679:    }
        -: 1680:
        -: 1681:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1682:	   typename _Compare, typename _Alloc>
        -: 1683:    inline void
        -: 1684:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1685:    _M_move_assign(_Rb_tree& __x, true_type)
        -: 1686:    {
        -: 1687:      clear();
        -: 1688:      if (__x._M_root() != nullptr)
        -: 1689:	_M_move_data(__x, true_type());
        -: 1690:      std::__alloc_on_move(_M_get_Node_allocator(),
        -: 1691:			   __x._M_get_Node_allocator());
        -: 1692:    }
        -: 1693:
        -: 1694:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1695:	   typename _Compare, typename _Alloc>
        -: 1696:    void
        -: 1697:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1698:    _M_move_assign(_Rb_tree& __x, false_type)
        -: 1699:    {
        -: 1700:      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
        -: 1701:	return _M_move_assign(__x, true_type{});
        -: 1702:
        -: 1703:      // Try to move each node reusing existing nodes and copying __x nodes
        -: 1704:      // structure.
        -: 1705:      _Reuse_or_alloc_node __roan(*this);
        -: 1706:      _M_impl._M_reset();
        -: 1707:      if (__x._M_root() != nullptr)
        -: 1708:	{
        -: 1709:	  auto __lbd =
        -: 1710:	    [&__roan](const value_type& __cval)
        -: 1711:	    {
        -: 1712:	      auto& __val = const_cast<value_type&>(__cval);
        -: 1713:	      return __roan(std::move(__val));
        -: 1714:	    };
        -: 1715:	  _M_root() = _M_copy(__x, __lbd);
        -: 1716:	  __x.clear();
        -: 1717:	}
        -: 1718:    }
        -: 1719:
        -: 1720:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1721:	   typename _Compare, typename _Alloc>
        -: 1722:    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
        -: 1723:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1724:    operator=(_Rb_tree&& __x)
        -: 1725:    noexcept(_Alloc_traits::_S_nothrow_move()
        -: 1726:	     && is_nothrow_move_assignable<_Compare>::value)
        -: 1727:    {
        -: 1728:      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
        -: 1729:      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
        -: 1730:      return *this;
        -: 1731:    }
        -: 1732:
        -: 1733:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1734:	   typename _Compare, typename _Alloc>
        -: 1735:    template<typename _Iterator>
        -: 1736:      void
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_assign_uniqueIPKiEEvT_S9_ called 11 returned 100% blocks executed 71%
       11: 1737:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1738:      _M_assign_unique(_Iterator __first, _Iterator __last)
        -: 1739:      {
       22: 1740:	_Reuse_or_alloc_node __roan(*this);
       11: 1740-block  0
call    0 returned 11
       11: 1740-block  1
call    1 returned 11
    $$$$$: 1740-block  2
call    2 never executed
       11: 1741:	_M_impl._M_reset();
call    0 returned 11
       22: 1742:	for (; __first != __last; ++__first)
       22: 1742-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 11
       11: 1743:	  _M_insert_unique_(end(), *__first, __roan);
       11: 1743-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 11 (fallthrough)
branch  4 taken 0 (throw)
       11: 1743-block  1
    $$$$$: 1743-block  2
    $$$$$: 1743-block  3
       11: 1744:      }
        -: 1745:
        -: 1746:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1747:	   typename _Compare, typename _Alloc>
        -: 1748:    template<typename _Iterator>
        -: 1749:      void
        -: 1750:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1751:      _M_assign_equal(_Iterator __first, _Iterator __last)
        -: 1752:      {
        -: 1753:	_Reuse_or_alloc_node __roan(*this);
        -: 1754:	_M_impl._M_reset();
        -: 1755:	for (; __first != __last; ++__first)
        -: 1756:	  _M_insert_equal_(end(), *__first, __roan);
        -: 1757:      }
        -: 1758:#endif
        -: 1759:
        -: 1760:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1761:	   typename _Compare, typename _Alloc>
        -: 1762:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEEaSERKS5_ called 67 returned 100% blocks executed 54%
       67: 1763:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1764:    operator=(const _Rb_tree& __x)
        -: 1765:    {
       67: 1766:      if (this != &__x)
       67: 1766-block  0
branch  0 taken 67 (fallthrough)
branch  1 taken 0
        -: 1767:	{
        -: 1768:	  // Note that _Key may be a constant type.
        -: 1769:#if __cplusplus >= 201103L
       67: 1770:	  if (_Alloc_traits::_S_propagate_on_copy_assign())
       67: 1770-block  0
call    0 returned 67
branch  1 taken 0 (fallthrough)
branch  2 taken 67
        -: 1771:	    {
    #####: 1772:	      auto& __this_alloc = this->_M_get_Node_allocator();
    %%%%%: 1772-block  0
call    0 never executed
    #####: 1773:	      auto& __that_alloc = __x._M_get_Node_allocator();
call    0 never executed
    #####: 1774:	      if (!_Alloc_traits::_S_always_equal()
call    0 never executed
    #####: 1775:		  && __this_alloc != __that_alloc)
branch  0 never executed
branch  1 never executed
    %%%%%: 1775-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1775-block  1
    %%%%%: 1775-block  2
    %%%%%: 1775-block  3
branch  5 never executed
branch  6 never executed
        -: 1776:		{
        -: 1777:		  // Replacement allocator cannot free existing storage, we need
        -: 1778:		  // to erase nodes first.
    #####: 1779:		  clear();
    %%%%%: 1779-block  0
call    0 never executed
    #####: 1780:		  std::__alloc_on_copy(__this_alloc, __that_alloc);
call    0 never executed
        -: 1781:		}
        -: 1782:	    }
        -: 1783:#endif
        -: 1784:
      134: 1785:	  _Reuse_or_alloc_node __roan(*this);
       67: 1785-block  0
call    0 returned 67
       67: 1785-block  1
call    1 returned 67
    $$$$$: 1785-block  2
call    2 never executed
       67: 1786:	  _M_impl._M_reset();
call    0 returned 67
        -: 1787:	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
       67: 1788:	  if (__x._M_root() != 0)
call    0 returned 67
branch  1 taken 67 (fallthrough)
branch  2 taken 0
       67: 1789:	    _M_root() = _M_copy(__x, __roan);
       67: 1789-block  0
call    0 returned 67
branch  1 taken 67 (fallthrough)
branch  2 taken 0 (throw)
       67: 1789-block  1
call    3 returned 67
        -: 1790:	}
        -: 1791:
       67: 1792:      return *this;
       67: 1792-block  0
       67: 1792-block  1
        -: 1793:    }
        -: 1794:
        -: 1795:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1796:	   typename _Compare, typename _Alloc>
        -: 1797:#if __cplusplus >= 201103L
        -: 1798:    template<typename _Arg, typename _NodeGen>
        -: 1799:#else
        -: 1800:    template<typename _NodeGen>
        -: 1801:#endif
        -: 1802:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
     1488: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
     1488: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
    2976*: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
        -: 1814:							_S_key(__p)));
        -: 1815:
     1488: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
        -: 1817:
     1488: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
     1488: 1819:				      this->_M_impl._M_header);
     1488: 1820:	++_M_impl._M_node_count;
     1488: 1821:	return iterator(__z);
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IRKiNS5_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSD_OT_RT0_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IRKiNS5_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSD_OT_RT0_ called 11 returned 100% blocks executed 69%
       11: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
       11: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
       11: 1812-block  0
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
      22*: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
       11: 1813-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
    %%%%%: 1813-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1813-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
       11: 1813-block  3
    %%%%%: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
       11: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
       11: 1816-block  0
call    0 returned 11
call    1 returned 11
        -: 1817:
       11: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
       11: 1819:				      this->_M_impl._M_header);
call    0 returned 11
       11: 1820:	++_M_impl._M_node_count;
       11: 1821:	return iterator(__z);
call    0 returned 11
       11: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE10_M_insert_IRS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSG_OT_RT0_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE10_M_insert_IRS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSG_OT_RT0_ called 346 returned 100% blocks executed 100%
      346: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
      346: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
      346: 1812-block  0
call    0 returned 346
branch  1 taken 346 (fallthrough)
branch  2 taken 0
      692: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
      346: 1813-block  0
branch  0 taken 346 (fallthrough)
branch  1 taken 0
      346: 1813-block  1
call    2 returned 346
branch  3 taken 346 (fallthrough)
branch  4 taken 0 (throw)
      346: 1813-block  2
call    5 returned 346
call    6 returned 346
branch  7 taken 54 (fallthrough)
branch  8 taken 292
       54: 1813-block  3
      292: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
      346: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
      346: 1816-block  0
call    0 returned 346
call    1 returned 346
        -: 1817:
      346: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      346: 1819:				      this->_M_impl._M_header);
call    0 returned 346
      346: 1820:	++_M_impl._M_node_count;
      346: 1821:	return iterator(__z);
call    0 returned 346
      346: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSE_OT_RT0_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE10_M_insert_IS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSE_OT_RT0_ called 171 returned 100% blocks executed 100%
      171: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
      171: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
      171: 1812-block  0
call    0 returned 171
branch  1 taken 114 (fallthrough)
branch  2 taken 57
      342: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
      171: 1813-block  0
branch  0 taken 171 (fallthrough)
branch  1 taken 0
      114: 1813-block  1
call    2 returned 114
branch  3 taken 114 (fallthrough)
branch  4 taken 0 (throw)
      114: 1813-block  2
call    5 returned 114
call    6 returned 114
branch  7 taken 0 (fallthrough)
branch  8 taken 114
       57: 1813-block  3
      114: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
      171: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
      171: 1816-block  0
call    0 returned 171
call    1 returned 171
        -: 1817:
      171: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      171: 1819:				      this->_M_impl._M_header);
call    0 returned 171
      171: 1820:	++_M_impl._M_node_count;
      171: 1821:	return iterator(__z);
call    0 returned 171
      171: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSB_OT_RT0_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSB_OT_RT0_ called 95 returned 100% blocks executed 69%
       95: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
       95: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
       95: 1812-block  0
call    0 returned 95
branch  1 taken 0 (fallthrough)
branch  2 taken 95
     190*: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
       95: 1813-block  0
branch  0 taken 95 (fallthrough)
branch  1 taken 0
    %%%%%: 1813-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1813-block  2
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
       95: 1813-block  3
    %%%%%: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
       95: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
       95: 1816-block  0
call    0 returned 95
call    1 returned 95
        -: 1817:
       95: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
       95: 1819:				      this->_M_impl._M_header);
call    0 returned 95
       95: 1820:	++_M_impl._M_node_count;
       95: 1821:	return iterator(__z);
call    0 returned 95
       95: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE10_M_insert_IS8_NSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSJ_OT_RT0_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE10_M_insert_IS8_NSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS8_EPSt18_Rb_tree_node_baseSJ_OT_RT0_ called 75 returned 100% blocks executed 100%
       75: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
       75: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
       75: 1812-block  0
call    0 returned 75
branch  1 taken 68 (fallthrough)
branch  2 taken 7
      150: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
       75: 1813-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 0
       68: 1813-block  1
call    2 returned 68
branch  3 taken 68 (fallthrough)
branch  4 taken 0 (throw)
       68: 1813-block  2
call    5 returned 68
call    6 returned 68
branch  7 taken 68 (fallthrough)
branch  8 taken 0 (throw)
       68: 1813-block  3
branch  9 taken 19 (fallthrough)
branch 10 taken 49
       26: 1813-block  4
       49: 1813-block  5
        -: 1814:							_S_key(__p)));
        -: 1815:
       75: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
       75: 1816-block  0
call    0 returned 75
call    1 returned 75
        -: 1817:
       75: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
       75: 1819:				      this->_M_impl._M_header);
call    0 returned 75
       75: 1820:	++_M_impl._M_node_count;
       75: 1821:	return iterator(__z);
call    0 returned 75
       75: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE10_M_insert_IS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_RT0_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE10_M_insert_IS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_RT0_ called 562 returned 100% blocks executed 100%
      562: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
      562: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
      562: 1812-block  0
call    0 returned 562
branch  1 taken 555 (fallthrough)
branch  2 taken 7
     1124: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
      562: 1813-block  0
branch  0 taken 562 (fallthrough)
branch  1 taken 0
      555: 1813-block  1
call    2 returned 555
branch  3 taken 555 (fallthrough)
branch  4 taken 0 (throw)
      555: 1813-block  2
call    5 returned 555
call    6 returned 555
branch  7 taken 206 (fallthrough)
branch  8 taken 349
      213: 1813-block  3
      349: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
      562: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
      562: 1816-block  0
call    0 returned 562
call    1 returned 562
        -: 1817:
      562: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      562: 1819:				      this->_M_impl._M_header);
call    0 returned 562
      562: 1820:	++_M_impl._M_node_count;
      562: 1821:	return iterator(__z);
call    0 returned 562
      562: 1821-block  0
        -: 1822:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IRKiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSD_OT_RT0_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE10_M_insert_IRKiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiEPSt18_Rb_tree_node_baseSD_OT_RT0_ called 228 returned 100% blocks executed 100%
      228: 1803:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1804:      _M_insert_(_Base_ptr __x, _Base_ptr __p,
        -: 1805:#if __cplusplus >= 201103L
        -: 1806:		 _Arg&& __v,
        -: 1807:#else
        -: 1808:		 const _Val& __v,
        -: 1809:#endif
        -: 1810:		 _NodeGen& __node_gen)
        -: 1811:      {
      228: 1812:	bool __insert_left = (__x != 0 || __p == _M_end()
      228: 1812-block  0
call    0 returned 228
branch  1 taken 75 (fallthrough)
branch  2 taken 153
      456: 1813:			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
      228: 1813-block  0
branch  0 taken 228 (fallthrough)
branch  1 taken 0
       75: 1813-block  1
call    2 returned 75
branch  3 taken 75 (fallthrough)
branch  4 taken 0 (throw)
       75: 1813-block  2
call    5 returned 75
call    6 returned 75
branch  7 taken 37 (fallthrough)
branch  8 taken 38
      190: 1813-block  3
       38: 1813-block  4
        -: 1814:							_S_key(__p)));
        -: 1815:
      228: 1816:	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
      228: 1816-block  0
call    0 returned 228
call    1 returned 228
        -: 1817:
      228: 1818:	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      228: 1819:				      this->_M_impl._M_header);
call    0 returned 228
      228: 1820:	++_M_impl._M_node_count;
      228: 1821:	return iterator(__z);
call    0 returned 228
      228: 1821-block  0
        -: 1822:      }
------------------
        -: 1823:
        -: 1824:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1825:	   typename _Compare, typename _Alloc>
        -: 1826:#if __cplusplus >= 201103L
        -: 1827:    template<typename _Arg>
        -: 1828:#endif
        -: 1829:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE15_M_insert_lowerIRS3_EESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseOT_ called 0 returned 0% blocks executed 0%
    #####: 1830:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1831:#if __cplusplus >= 201103L
        -: 1832:    _M_insert_lower(_Base_ptr __p, _Arg&& __v)
        -: 1833:#else
        -: 1834:    _M_insert_lower(_Base_ptr __p, const _Val& __v)
        -: 1835:#endif
        -: 1836:    {
    #####: 1837:      bool __insert_left = (__p == _M_end()
    %%%%%: 1837-block  0
call    0 never executed
    #####: 1838:			    || !_M_impl._M_key_compare(_S_key(__p),
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%: 1838-block  0
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%: 1838-block  1
    %%%%%: 1838-block  2
    #####: 1839:						       _KeyOfValue()(__v)));
    %%%%%: 1839-block  0
call    0 never executed
        -: 1840:
    #####: 1841:      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
    %%%%%: 1841-block  0
call    0 never executed
call    1 never executed
        -: 1842:
    #####: 1843:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    #####: 1844:				    this->_M_impl._M_header);
call    0 never executed
    #####: 1845:      ++_M_impl._M_node_count;
    #####: 1846:      return iterator(__z);
call    0 never executed
    %%%%%: 1846-block  0
        -: 1847:    }
        -: 1848:
        -: 1849:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1850:	   typename _Compare, typename _Alloc>
        -: 1851:#if __cplusplus >= 201103L
        -: 1852:    template<typename _Arg>
        -: 1853:#endif
        -: 1854:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE21_M_insert_equal_lowerIRS3_EESt17_Rb_tree_iteratorIS3_EOT_ called 0 returned 0% blocks executed 0%
    #####: 1855:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1856:#if __cplusplus >= 201103L
        -: 1857:    _M_insert_equal_lower(_Arg&& __v)
        -: 1858:#else
        -: 1859:    _M_insert_equal_lower(const _Val& __v)
        -: 1860:#endif
        -: 1861:    {
    #####: 1862:      _Link_type __x = _M_begin();
    %%%%%: 1862-block  0
call    0 never executed
    #####: 1863:      _Base_ptr __y = _M_end();
call    0 never executed
    #####: 1864:      while (__x != 0)
    %%%%%: 1864-block  0
branch  0 never executed
branch  1 never executed
        -: 1865:	{
    #####: 1866:	  __y = __x;
    #####: 1867:	  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
    %%%%%: 1867-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1867-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 1867-block  2
    #####: 1868:		_S_left(__x) : _S_right(__x);
    %%%%%: 1868-block  0
call    0 never executed
    %%%%%: 1868-block  1
call    1 never executed
        -: 1869:	}
    #####: 1870:      return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));
    %%%%%: 1870-block  0
call    0 never executed
call    1 never executed
        -: 1871:    }
        -: 1872:
        -: 1873:  template<typename _Key, typename _Val, typename _KoV,
        -: 1874:	   typename _Compare, typename _Alloc>
        -: 1875:    template<typename _NodeGen>
        -: 1876:      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
      428: 1877:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1878:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1879:      {
        -: 1880:	// Structural copy. __x and __p must be non-null.
      428: 1881:	_Link_type __top = _M_clone_node(__x, __node_gen);
      428: 1882:	__top->_M_parent = __p;
        -: 1883:
        -: 1884:	__try
        -: 1885:	  {
      428: 1886:	    if (__x->_M_right)
      16*: 1887:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
      428: 1888:	    __p = __top;
      428: 1889:	    __x = _S_left(__x);
        -: 1890:
      441: 1891:	    while (__x != 0)
        -: 1892:	      {
       13: 1893:		_Link_type __y = _M_clone_node(__x, __node_gen);
       13: 1894:		__p->_M_left = __y;
       13: 1895:		__y->_M_parent = __p;
       13: 1896:		if (__x->_M_right)
    #####: 1897:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
       13: 1898:		__p = __y;
       13: 1899:		__x = _S_left(__x);
        -: 1900:	      }
        -: 1901:	  }
    =====: 1902:	__catch(...)
        -: 1903:	  {
    =====: 1904:	    _M_erase(__top);
    =====: 1905:	    __throw_exception_again;
        -: 1906:	  }
      428: 1907:	return __top;
        -: 1908:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_PSt18_Rb_tree_node_baseRT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_PSt18_Rb_tree_node_baseRT_ called 361 returned 100% blocks executed 64%
      361: 1877:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1878:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1879:      {
        -: 1880:	// Structural copy. __x and __p must be non-null.
      361: 1881:	_Link_type __top = _M_clone_node(__x, __node_gen);
      361: 1881-block  0
call    0 returned 361
      361: 1882:	__top->_M_parent = __p;
        -: 1883:
        -: 1884:	__try
        -: 1885:	  {
      361: 1886:	    if (__x->_M_right)
branch  0 taken 16 (fallthrough)
branch  1 taken 345
       16: 1887:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
       16: 1887-block  0
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
       16: 1887-block  1
      361: 1888:	    __p = __top;
      361: 1889:	    __x = _S_left(__x);
      361: 1889-block  0
call    0 returned 361
        -: 1890:
      373: 1891:	    while (__x != 0)
      373: 1891-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 361
        -: 1892:	      {
       12: 1893:		_Link_type __y = _M_clone_node(__x, __node_gen);
       12: 1893-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12: 1894:		__p->_M_left = __y;
       12: 1895:		__y->_M_parent = __p;
       12: 1896:		if (__x->_M_right)
       12: 1896-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 12
    #####: 1897:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
    %%%%%: 1897-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1897-block  1
       12: 1898:		__p = __y;
       12: 1899:		__x = _S_left(__x);
       12: 1899-block  0
call    0 returned 12
        -: 1900:	      }
        -: 1901:	  }
    =====: 1902:	__catch(...)
    $$$$$: 1902-block  0
    $$$$$: 1902-block  1
call    0 never executed
    $$$$$: 1902-block  2
call    1 never executed
        -: 1903:	  {
    =====: 1904:	    _M_erase(__top);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====: 1905:	    __throw_exception_again;
    $$$$$: 1905-block  0
call    0 never executed
        -: 1906:	  }
      361: 1907:	return __top;
      361: 1907-block  0
      361: 1907-block  1
        -: 1908:      }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_PSt18_Rb_tree_node_baseRT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE7_M_copyINS5_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIiEPKS9_PSt18_Rb_tree_node_baseRT_ called 67 returned 100% blocks executed 50%
       67: 1877:      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
        -: 1878:      _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
        -: 1879:      {
        -: 1880:	// Structural copy. __x and __p must be non-null.
       67: 1881:	_Link_type __top = _M_clone_node(__x, __node_gen);
       67: 1881-block  0
call    0 returned 67
       67: 1882:	__top->_M_parent = __p;
        -: 1883:
        -: 1884:	__try
        -: 1885:	  {
       67: 1886:	    if (__x->_M_right)
branch  0 taken 0 (fallthrough)
branch  1 taken 67
    #####: 1887:	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
    %%%%%: 1887-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1887-block  1
       67: 1888:	    __p = __top;
       67: 1889:	    __x = _S_left(__x);
       67: 1889-block  0
call    0 returned 67
        -: 1890:
       68: 1891:	    while (__x != 0)
       68: 1891-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 67
        -: 1892:	      {
        1: 1893:		_Link_type __y = _M_clone_node(__x, __node_gen);
        1: 1893-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1: 1894:		__p->_M_left = __y;
        1: 1895:		__y->_M_parent = __p;
        1: 1896:		if (__x->_M_right)
        1: 1896-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####: 1897:		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
    %%%%%: 1897-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 1897-block  1
        1: 1898:		__p = __y;
        1: 1899:		__x = _S_left(__x);
        1: 1899-block  0
call    0 returned 1
        -: 1900:	      }
        -: 1901:	  }
    =====: 1902:	__catch(...)
    $$$$$: 1902-block  0
    $$$$$: 1902-block  1
call    0 never executed
    $$$$$: 1902-block  2
call    1 never executed
        -: 1903:	  {
    =====: 1904:	    _M_erase(__top);
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====: 1905:	    __throw_exception_again;
    $$$$$: 1905-block  0
call    0 never executed
        -: 1906:	  }
       67: 1907:	return __top;
       67: 1907-block  0
       67: 1907-block  1
        -: 1908:      }
------------------
        -: 1909:
        -: 1910:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1911:	   typename _Compare, typename _Alloc>
        -: 1912:    void
    2407*: 1913:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1914:    _M_erase(_Link_type __x)
        -: 1915:    {
        -: 1916:      // Erase without rebalancing.
    2407*: 1917:      while (__x != 0)
        -: 1918:	{
     798*: 1919:	  _M_erase(_S_right(__x));
     798*: 1920:	  _Link_type __y = _S_left(__x);
     798*: 1921:	  _M_drop_node(__x);
     798*: 1922:	  __x = __y;
        -: 1923:	}
    1609*: 1924:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E called 228 returned 100% blocks executed 100%
      399: 1913:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1914:    _M_erase(_Link_type __x)
        -: 1915:    {
        -: 1916:      // Erase without rebalancing.
      399: 1917:      while (__x != 0)
      399: 1917-block  0
branch  0 taken 171 (fallthrough)
branch  1 taken 228
        -: 1918:	{
      171: 1919:	  _M_erase(_S_right(__x));
      171: 1919-block  0
call    0 returned 171
call    1 returned 171
      171: 1920:	  _Link_type __y = _S_left(__x);
call    0 returned 171
      171: 1921:	  _M_drop_node(__x);
call    0 returned 171
      171: 1922:	  __x = __y;
        -: 1923:	}
      228: 1924:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E called 82 returned 100% blocks executed 100%
      157: 1913:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1914:    _M_erase(_Link_type __x)
        -: 1915:    {
        -: 1916:      // Erase without rebalancing.
      157: 1917:      while (__x != 0)
      157: 1917-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 82
        -: 1918:	{
       75: 1919:	  _M_erase(_S_right(__x));
       75: 1919-block  0
call    0 returned 75
call    1 returned 75
       75: 1920:	  _Link_type __y = _S_left(__x);
call    0 returned 75
       75: 1921:	  _M_drop_node(__x);
call    0 returned 75
       75: 1922:	  __x = __y;
        -: 1923:	}
       82: 1924:    }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E called 0 returned 0% blocks executed 0%
    #####: 1913:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1914:    _M_erase(_Link_type __x)
        -: 1915:    {
        -: 1916:      // Erase without rebalancing.
    #####: 1917:      while (__x != 0)
    %%%%%: 1917-block  0
branch  0 never executed
branch  1 never executed
        -: 1918:	{
    #####: 1919:	  _M_erase(_S_right(__x));
    %%%%%: 1919-block  0
call    0 never executed
call    1 never executed
    #####: 1920:	  _Link_type __y = _S_left(__x);
call    0 never executed
    #####: 1921:	  _M_drop_node(__x);
call    0 never executed
    #####: 1922:	  __x = __y;
        -: 1923:	}
    #####: 1924:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE called 1299 returned 100% blocks executed 100%
     1851: 1913:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1914:    _M_erase(_Link_type __x)
        -: 1915:    {
        -: 1916:      // Erase without rebalancing.
     1851: 1917:      while (__x != 0)
     1851: 1917-block  0
branch  0 taken 552 (fallthrough)
branch  1 taken 1299
        -: 1918:	{
      552: 1919:	  _M_erase(_S_right(__x));
      552: 1919-block  0
call    0 returned 552
call    1 returned 552
      552: 1920:	  _Link_type __y = _S_left(__x);
call    0 returned 552
      552: 1921:	  _M_drop_node(__x);
call    0 returned 552
      552: 1922:	  __x = __y;
        -: 1923:	}
     1299: 1924:    }
------------------
        -: 1925:
        -: 1926:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1927:	   typename _Compare, typename _Alloc>
        -: 1928:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1929:		      _Compare, _Alloc>::iterator
    12895: 1930:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1931:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1932:		   const _Key& __k)
        -: 1933:    {
    12895: 1934:      while (__x != 0)
    10287: 1935:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
     3956: 1936:	  __y = __x, __x = _S_left(__x);
        -: 1937:	else
     6331: 1938:	  __x = _S_right(__x);
     2608: 1939:      return iterator(__y);
        -: 1940:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_ called 355 returned 100% blocks executed 100%
     1065: 1930:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1931:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1932:		   const _Key& __k)
        -: 1933:    {
     1065: 1934:      while (__x != 0)
     1065: 1934-block  0
branch  0 taken 710 (fallthrough)
branch  1 taken 355
      710: 1934-block  1
      710: 1935:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      710: 1935-block  0
call    0 returned 710
call    1 returned 710
branch  2 taken 476 (fallthrough)
branch  3 taken 234
      476: 1936:	  __y = __x, __x = _S_left(__x);
      476: 1936-block  0
call    0 returned 476
        -: 1937:	else
      234: 1938:	  __x = _S_right(__x);
      234: 1938-block  0
call    0 returned 234
      355: 1939:      return iterator(__y);
      355: 1939-block  0
call    0 returned 355
        -: 1940:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS6_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS6_ called 747 returned 100% blocks executed 100%
     3409: 1930:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1931:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1932:		   const _Key& __k)
        -: 1933:    {
     3409: 1934:      while (__x != 0)
     3409: 1934-block  0
branch  0 taken 2662 (fallthrough)
branch  1 taken 747
     2662: 1934-block  1
     2662: 1935:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
     2662: 1935-block  0
call    0 returned 2662
call    1 returned 2662
branch  2 taken 987 (fallthrough)
branch  3 taken 1675
      987: 1936:	  __y = __x, __x = _S_left(__x);
      987: 1936-block  0
call    0 returned 987
        -: 1937:	else
     1675: 1938:	  __x = _S_right(__x);
     1675: 1938-block  0
call    0 returned 1675
      747: 1939:      return iterator(__y);
      747: 1939-block  0
call    0 returned 747
        -: 1940:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE14_M_lower_boundEPSt13_Rb_tree_nodeIiEPSt18_Rb_tree_node_baseRKi called 420 returned 100% blocks executed 100%
     1388: 1930:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1931:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1932:		   const _Key& __k)
        -: 1933:    {
     1388: 1934:      while (__x != 0)
     1388: 1934-block  0
branch  0 taken 968 (fallthrough)
branch  1 taken 420
      968: 1934-block  1
      968: 1935:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
      968: 1935-block  0
call    0 returned 968
call    1 returned 968
branch  2 taken 372 (fallthrough)
branch  3 taken 596
      372: 1936:	  __y = __x, __x = _S_left(__x);
      372: 1936-block  0
call    0 returned 372
        -: 1937:	else
      596: 1938:	  __x = _S_right(__x);
      596: 1938-block  0
call    0 returned 596
      420: 1939:      return iterator(__y);
      420: 1939-block  0
call    0 returned 420
        -: 1940:    }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_ called 1086 returned 100% blocks executed 100%
     7033: 1930:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1931:    _M_lower_bound(_Link_type __x, _Base_ptr __y,
        -: 1932:		   const _Key& __k)
        -: 1933:    {
     7033: 1934:      while (__x != 0)
     7033: 1934-block  0
branch  0 taken 5947 (fallthrough)
branch  1 taken 1086
     5947: 1934-block  1
     5947: 1935:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
     5947: 1935-block  0
call    0 returned 5947
call    1 returned 5947
branch  2 taken 2121 (fallthrough)
branch  3 taken 3826
     2121: 1936:	  __y = __x, __x = _S_left(__x);
     2121: 1936-block  0
call    0 returned 2121
        -: 1937:	else
     3826: 1938:	  __x = _S_right(__x);
     3826: 1938-block  0
call    0 returned 3826
     1086: 1939:      return iterator(__y);
     1086: 1939-block  0
call    0 returned 1086
        -: 1940:    }
------------------
        -: 1941:
        -: 1942:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1943:	   typename _Compare, typename _Alloc>
        -: 1944:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1945:		      _Compare, _Alloc>::const_iterator
        -: 1946:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1947:    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1948:		   const _Key& __k) const
        -: 1949:    {
        -: 1950:      while (__x != 0)
        -: 1951:	if (!_M_impl._M_key_compare(_S_key(__x), __k))
        -: 1952:	  __y = __x, __x = _S_left(__x);
        -: 1953:	else
        -: 1954:	  __x = _S_right(__x);
        -: 1955:      return const_iterator(__y);
        -: 1956:    }
        -: 1957:
        -: 1958:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1959:	   typename _Compare, typename _Alloc>
        -: 1960:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1961:		      _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_upper_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_ called 1086 returned 100% blocks executed 100%
     7346: 1962:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1963:    _M_upper_bound(_Link_type __x, _Base_ptr __y,
        -: 1964:		   const _Key& __k)
        -: 1965:    {
     7346: 1966:      while (__x != 0)
     7346: 1966-block  0
branch  0 taken 6260 (fallthrough)
branch  1 taken 1086
     6260: 1966-block  1
     6260: 1967:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
     6260: 1967-block  0
call    0 returned 6260
call    1 returned 6260
branch  2 taken 1554 (fallthrough)
branch  3 taken 4706
     1554: 1968:	  __y = __x, __x = _S_left(__x);
     1554: 1968-block  0
call    0 returned 1554
        -: 1969:	else
     4706: 1970:	  __x = _S_right(__x);
     4706: 1970-block  0
call    0 returned 4706
     1086: 1971:      return iterator(__y);
     1086: 1971-block  0
call    0 returned 1086
        -: 1972:    }
        -: 1973:
        -: 1974:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1975:	   typename _Compare, typename _Alloc>
        -: 1976:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1977:		      _Compare, _Alloc>::const_iterator
        -: 1978:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1979:    _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
        -: 1980:		   const _Key& __k) const
        -: 1981:    {
        -: 1982:      while (__x != 0)
        -: 1983:	if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 1984:	  __y = __x, __x = _S_left(__x);
        -: 1985:	else
        -: 1986:	  __x = _S_right(__x);
        -: 1987:      return const_iterator(__y);
        -: 1988:    }
        -: 1989:
        -: 1990:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 1991:	   typename _Compare, typename _Alloc>
        -: 1992:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1993:			   _Compare, _Alloc>::iterator,
        -: 1994:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 1995:			   _Compare, _Alloc>::iterator>
        -: 1996:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 1997:    equal_range(const _Key& __k)
        -: 1998:    {
        -: 1999:      _Link_type __x = _M_begin();
        -: 2000:      _Base_ptr __y = _M_end();
        -: 2001:      while (__x != 0)
        -: 2002:	{
        -: 2003:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        -: 2004:	    __x = _S_right(__x);
        -: 2005:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 2006:	    __y = __x, __x = _S_left(__x);
        -: 2007:	  else
        -: 2008:	    {
        -: 2009:	      _Link_type __xu(__x);
        -: 2010:	      _Base_ptr __yu(__y);
        -: 2011:	      __y = __x, __x = _S_left(__x);
        -: 2012:	      __xu = _S_right(__xu);
        -: 2013:	      return pair<iterator,
        -: 2014:			  iterator>(_M_lower_bound(__x, __y, __k),
        -: 2015:				    _M_upper_bound(__xu, __yu, __k));
        -: 2016:	    }
        -: 2017:	}
        -: 2018:      return pair<iterator, iterator>(iterator(__y),
        -: 2019:				      iterator(__y));
        -: 2020:    }
        -: 2021:
        -: 2022:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2023:	   typename _Compare, typename _Alloc>
        -: 2024:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2025:			   _Compare, _Alloc>::const_iterator,
        -: 2026:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2027:			   _Compare, _Alloc>::const_iterator>
        -: 2028:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2029:    equal_range(const _Key& __k) const
        -: 2030:    {
        -: 2031:      _Const_Link_type __x = _M_begin();
        -: 2032:      _Const_Base_ptr __y = _M_end();
        -: 2033:      while (__x != 0)
        -: 2034:	{
        -: 2035:	  if (_M_impl._M_key_compare(_S_key(__x), __k))
        -: 2036:	    __x = _S_right(__x);
        -: 2037:	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
        -: 2038:	    __y = __x, __x = _S_left(__x);
        -: 2039:	  else
        -: 2040:	    {
        -: 2041:	      _Const_Link_type __xu(__x);
        -: 2042:	      _Const_Base_ptr __yu(__y);
        -: 2043:	      __y = __x, __x = _S_left(__x);
        -: 2044:	      __xu = _S_right(__xu);
        -: 2045:	      return pair<const_iterator,
        -: 2046:			  const_iterator>(_M_lower_bound(__x, __y, __k),
        -: 2047:					  _M_upper_bound(__xu, __yu, __k));
        -: 2048:	    }
        -: 2049:	}
        -: 2050:      return pair<const_iterator, const_iterator>(const_iterator(__y),
        -: 2051:						  const_iterator(__y));
        -: 2052:    }
        -: 2053:
        -: 2054:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2055:	   typename _Compare, typename _Alloc>
        -: 2056:    void
        -: 2057:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2058:    swap(_Rb_tree& __t)
        -: 2059:    _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
        -: 2060:    {
        -: 2061:      if (_M_root() == 0)
        -: 2062:	{
        -: 2063:	  if (__t._M_root() != 0)
        -: 2064:	    _M_impl._M_move_data(__t._M_impl);
        -: 2065:	}
        -: 2066:      else if (__t._M_root() == 0)
        -: 2067:	__t._M_impl._M_move_data(_M_impl);
        -: 2068:      else
        -: 2069:	{
        -: 2070:	  std::swap(_M_root(),__t._M_root());
        -: 2071:	  std::swap(_M_leftmost(),__t._M_leftmost());
        -: 2072:	  std::swap(_M_rightmost(),__t._M_rightmost());
        -: 2073:
        -: 2074:	  _M_root()->_M_parent = _M_end();
        -: 2075:	  __t._M_root()->_M_parent = __t._M_end();
        -: 2076:	  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
        -: 2077:	}
        -: 2078:      // No need to swap header's color as it does not change.
        -: 2079:      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);
        -: 2080:
        -: 2081:      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
        -: 2082:				__t._M_get_Node_allocator());
        -: 2083:    }
        -: 2084:
        -: 2085:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2086:	   typename _Compare, typename _Alloc>
        -: 2087:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2088:			   _Compare, _Alloc>::_Base_ptr,
        -: 2089:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2090:			   _Compare, _Alloc>::_Base_ptr>
      588: 2091:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2092:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2093:    {
        -: 2094:      typedef pair<_Base_ptr, _Base_ptr> _Res;
      588: 2095:      _Link_type __x = _M_begin();
      588: 2096:      _Base_ptr __y = _M_end();
      588: 2097:      bool __comp = true;
     1095: 2098:      while (__x != 0)
        -: 2099:	{
      507: 2100:	  __y = __x;
      507: 2101:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
     507*: 2102:	  __x = __comp ? _S_left(__x) : _S_right(__x);
        -: 2103:	}
      588: 2104:      iterator __j = iterator(__y);
      588: 2105:      if (__comp)
        -: 2106:	{
      379: 2107:	  if (__j == begin())
      349: 2108:	    return _Res(__x, __y);
        -: 2109:	  else
      30*: 2110:	    --__j;
        -: 2111:	}
      239: 2112:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
      231: 2113:	return _Res(__x, __y);
       8*: 2114:      return _Res(__j._M_node, 0);
        -: 2115:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE24_M_get_insert_unique_posERS1_ called 171 returned 100% blocks executed 86%
      171: 2091:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2092:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2093:    {
        -: 2094:      typedef pair<_Base_ptr, _Base_ptr> _Res;
      171: 2095:      _Link_type __x = _M_begin();
      171: 2095-block  0
call    0 returned 171
      171: 2096:      _Base_ptr __y = _M_end();
call    0 returned 171
      171: 2097:      bool __comp = true;
      342: 2098:      while (__x != 0)
      342: 2098-block  0
branch  0 taken 171 (fallthrough)
branch  1 taken 171
        -: 2099:	{
      171: 2100:	  __y = __x;
      171: 2101:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
      171: 2101-block  0
call    0 returned 171
branch  1 taken 171 (fallthrough)
branch  2 taken 0 (throw)
      171: 2101-block  1
call    3 returned 171
     171*: 2102:	  __x = __comp ? _S_left(__x) : _S_right(__x);
branch  0 taken 0 (fallthrough)
branch  1 taken 171
    %%%%%: 2102-block  0
call    2 never executed
      171: 2102-block  1
call    3 returned 171
      171: 2102-block  2
        -: 2103:	}
      171: 2104:      iterator __j = iterator(__y);
      171: 2104-block  0
call    0 returned 171
      171: 2105:      if (__comp)
branch  0 taken 57 (fallthrough)
branch  1 taken 114
        -: 2106:	{
       57: 2107:	  if (__j == begin())
       57: 2107-block  0
call    0 returned 57
call    1 returned 57
branch  2 taken 57 (fallthrough)
branch  3 taken 0
       57: 2108:	    return _Res(__x, __y);
       57: 2108-block  0
call    0 returned 57
        -: 2109:	  else
    #####: 2110:	    --__j;
    %%%%%: 2110-block  0
call    0 never executed
        -: 2111:	}
      114: 2112:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
      114: 2112-block  0
call    0 returned 114
branch  1 taken 114 (fallthrough)
branch  2 taken 0 (throw)
      114: 2112-block  1
call    3 returned 114
branch  4 taken 114 (fallthrough)
branch  5 taken 0
      114: 2113:	return _Res(__x, __y);
      114: 2113-block  0
call    0 returned 114
    #####: 2114:      return _Res(__j._M_node, 0);
    %%%%%: 2114-block  0
call    0 never executed
        -: 2115:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE24_M_get_insert_unique_posERS6_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE24_M_get_insert_unique_posERS6_ called 75 returned 100% blocks executed 93%
       75: 2091:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2092:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2093:    {
        -: 2094:      typedef pair<_Base_ptr, _Base_ptr> _Res;
       75: 2095:      _Link_type __x = _M_begin();
       75: 2095-block  0
call    0 returned 75
       75: 2096:      _Base_ptr __y = _M_end();
call    0 returned 75
       75: 2097:      bool __comp = true;
      287: 2098:      while (__x != 0)
      287: 2098-block  0
branch  0 taken 212 (fallthrough)
branch  1 taken 75
        -: 2099:	{
      212: 2100:	  __y = __x;
      212: 2101:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
      212: 2101-block  0
call    0 returned 212
branch  1 taken 212 (fallthrough)
branch  2 taken 0 (throw)
      212: 2101-block  1
call    3 returned 212
branch  4 taken 212 (fallthrough)
branch  5 taken 0 (throw)
      212: 2102:	  __x = __comp ? _S_left(__x) : _S_right(__x);
      212: 2102-block  0
branch  0 taken 42 (fallthrough)
branch  1 taken 170
       42: 2102-block  1
call    2 returned 42
      170: 2102-block  2
call    3 returned 170
      212: 2102-block  3
        -: 2103:	}
       75: 2104:      iterator __j = iterator(__y);
       75: 2104-block  0
call    0 returned 75
       75: 2105:      if (__comp)
branch  0 taken 26 (fallthrough)
branch  1 taken 49
        -: 2106:	{
       26: 2107:	  if (__j == begin())
       26: 2107-block  0
call    0 returned 26
call    1 returned 26
branch  2 taken 7 (fallthrough)
branch  3 taken 19
        7: 2108:	    return _Res(__x, __y);
        7: 2108-block  0
call    0 returned 7
        -: 2109:	  else
       19: 2110:	    --__j;
       19: 2110-block  0
call    0 returned 19
        -: 2111:	}
       68: 2112:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
       68: 2112-block  0
call    0 returned 68
branch  1 taken 68 (fallthrough)
branch  2 taken 0 (throw)
       68: 2112-block  1
call    3 returned 68
branch  4 taken 68 (fallthrough)
branch  5 taken 0 (throw)
       68: 2112-block  2
branch  6 taken 68 (fallthrough)
branch  7 taken 0
       68: 2113:	return _Res(__x, __y);
       68: 2113-block  0
call    0 returned 68
    #####: 2114:      return _Res(__j._M_node, 0);
    %%%%%: 2114-block  0
call    0 never executed
        -: 2115:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE24_M_get_insert_unique_posERKi:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE24_M_get_insert_unique_posERKi called 342 returned 100% blocks executed 100%
      342: 2091:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2092:    _M_get_insert_unique_pos(const key_type& __k)
        -: 2093:    {
        -: 2094:      typedef pair<_Base_ptr, _Base_ptr> _Res;
      342: 2095:      _Link_type __x = _M_begin();
      342: 2095-block  0
call    0 returned 342
      342: 2096:      _Base_ptr __y = _M_end();
call    0 returned 342
      342: 2097:      bool __comp = true;
      466: 2098:      while (__x != 0)
      466: 2098-block  0
branch  0 taken 124 (fallthrough)
branch  1 taken 342
        -: 2099:	{
      124: 2100:	  __y = __x;
      124: 2101:	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
      124: 2101-block  0
call    0 returned 124
call    1 returned 124
      124: 2102:	  __x = __comp ? _S_left(__x) : _S_right(__x);
branch  0 taken 38 (fallthrough)
branch  1 taken 86
       38: 2102-block  0
call    2 returned 38
       86: 2102-block  1
call    3 returned 86
      124: 2102-block  2
        -: 2103:	}
      342: 2104:      iterator __j = iterator(__y);
      342: 2104-block  0
call    0 returned 342
      342: 2105:      if (__comp)
branch  0 taken 296 (fallthrough)
branch  1 taken 46
        -: 2106:	{
      296: 2107:	  if (__j == begin())
      296: 2107-block  0
call    0 returned 296
call    1 returned 296
branch  2 taken 285 (fallthrough)
branch  3 taken 11
      285: 2108:	    return _Res(__x, __y);
      285: 2108-block  0
call    0 returned 285
        -: 2109:	  else
       11: 2110:	    --__j;
       11: 2110-block  0
call    0 returned 11
        -: 2111:	}
       57: 2112:      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
       57: 2112-block  0
call    0 returned 57
branch  1 taken 57 (fallthrough)
branch  2 taken 0 (throw)
       57: 2112-block  1
call    3 returned 57
branch  4 taken 49 (fallthrough)
branch  5 taken 8
       49: 2113:	return _Res(__x, __y);
       49: 2113-block  0
call    0 returned 49
        8: 2114:      return _Res(__j._M_node, 0);
        8: 2114-block  0
call    0 returned 8
        -: 2115:    }
------------------
        -: 2116:
        -: 2117:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2118:	   typename _Compare, typename _Alloc>
        -: 2119:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2120:			   _Compare, _Alloc>::_Base_ptr,
        -: 2121:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2122:			   _Compare, _Alloc>::_Base_ptr>
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE23_M_get_insert_equal_posERS1_ called 815 returned 100% blocks executed 100%
      815: 2123:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2124:    _M_get_insert_equal_pos(const key_type& __k)
        -: 2125:    {
        -: 2126:      typedef pair<_Base_ptr, _Base_ptr> _Res;
      815: 2127:      _Link_type __x = _M_begin();
      815: 2127-block  0
call    0 returned 815
      815: 2128:      _Base_ptr __y = _M_end();
call    0 returned 815
     4002: 2129:      while (__x != 0)
     4002: 2129-block  0
branch  0 taken 3187 (fallthrough)
branch  1 taken 815
        -: 2130:	{
     3187: 2131:	  __y = __x;
     6374: 2132:	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
     3187: 2132-block  0
call    0 returned 3187
branch  1 taken 3187 (fallthrough)
branch  2 taken 0 (throw)
     3187: 2132-block  1
call    3 returned 3187
branch  4 taken 1157 (fallthrough)
branch  5 taken 2030
     3187: 2132-block  2
     3187: 2133:		_S_left(__x) : _S_right(__x);
     1157: 2133-block  0
call    0 returned 1157
     2030: 2133-block  1
call    1 returned 2030
        -: 2134:	}
      815: 2135:      return _Res(__x, __y);
      815: 2135-block  0
call    0 returned 815
      815: 2135-block  1
        -: 2136:    }
        -: 2137:
        -: 2138:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2139:	   typename _Compare, typename _Alloc>
        -: 2140:#if __cplusplus >= 201103L
        -: 2141:    template<typename _Arg>
        -: 2142:#endif
        -: 2143:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2144:			   _Compare, _Alloc>::iterator, bool>
      549: 2145:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2146:#if __cplusplus >= 201103L
        -: 2147:    _M_insert_unique(_Arg&& __v)
        -: 2148:#else
        -: 2149:    _M_insert_unique(const _Val& __v)
        -: 2150:#endif
        -: 2151:    {
        -: 2152:      typedef pair<iterator, bool> _Res;
        -: 2153:      pair<_Base_ptr, _Base_ptr> __res
      549: 2154:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
        -: 2155:
      549: 2156:      if (__res.second)
        -: 2157:	{
      541: 2158:	  _Alloc_node __an(*this);
      541: 2159:	  return _Res(_M_insert_(__res.first, __res.second,
        -: 2160:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
      541: 2161:		      true);
        -: 2162:	}
        -: 2163:
       8*: 2164:      return _Res(iterator(__res.first), false);
        -: 2165:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueIS2_EES0_ISt17_Rb_tree_iteratorIS2_EbEOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE16_M_insert_uniqueIS2_EES0_ISt17_Rb_tree_iteratorIS2_EbEOT_ called 171 returned 100% blocks executed 65%
      171: 2145:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2146:#if __cplusplus >= 201103L
        -: 2147:    _M_insert_unique(_Arg&& __v)
        -: 2148:#else
        -: 2149:    _M_insert_unique(const _Val& __v)
        -: 2150:#endif
        -: 2151:    {
        -: 2152:      typedef pair<iterator, bool> _Res;
        -: 2153:      pair<_Base_ptr, _Base_ptr> __res
      171: 2154:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
      171: 2154-block  0
call    0 returned 171
call    1 returned 171
branch  2 taken 171 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2154-block  1
        -: 2155:
      171: 2156:      if (__res.second)
      171: 2156-block  0
branch  0 taken 171 (fallthrough)
branch  1 taken 0
        -: 2157:	{
      171: 2158:	  _Alloc_node __an(*this);
      171: 2158-block  0
call    0 returned 171
      171: 2159:	  return _Res(_M_insert_(__res.first, __res.second,
call    0 returned 171
call    1 returned 171
branch  2 taken 171 (fallthrough)
branch  3 taken 0 (throw)
      171: 2159-block  0
call    4 returned 171
    $$$$$: 2159-block  1
        -: 2160:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
      171: 2161:		      true);
        -: 2162:	}
        -: 2163:
    #####: 2164:      return _Res(iterator(__res.first), false);
    %%%%%: 2164-block  0
call    0 never executed
call    1 never executed
        -: 2165:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_ called 95 returned 100% blocks executed 65%
       95: 2145:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2146:#if __cplusplus >= 201103L
        -: 2147:    _M_insert_unique(_Arg&& __v)
        -: 2148:#else
        -: 2149:    _M_insert_unique(const _Val& __v)
        -: 2150:#endif
        -: 2151:    {
        -: 2152:      typedef pair<iterator, bool> _Res;
        -: 2153:      pair<_Base_ptr, _Base_ptr> __res
       95: 2154:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
       95: 2154-block  0
call    0 returned 95
call    1 returned 95
branch  2 taken 95 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2154-block  1
        -: 2155:
       95: 2156:      if (__res.second)
       95: 2156-block  0
branch  0 taken 95 (fallthrough)
branch  1 taken 0
        -: 2157:	{
       95: 2158:	  _Alloc_node __an(*this);
       95: 2158-block  0
call    0 returned 95
       95: 2159:	  return _Res(_M_insert_(__res.first, __res.second,
call    0 returned 95
call    1 returned 95
branch  2 taken 95 (fallthrough)
branch  3 taken 0 (throw)
       95: 2159-block  0
call    4 returned 95
    $$$$$: 2159-block  1
        -: 2160:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
       95: 2161:		      true);
        -: 2162:	}
        -: 2163:
    #####: 2164:      return _Res(iterator(__res.first), false);
    %%%%%: 2164-block  0
call    0 never executed
call    1 never executed
        -: 2165:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE16_M_insert_uniqueIS8_EES5_ISt17_Rb_tree_iteratorIS8_EbEOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE16_M_insert_uniqueIS8_EES5_ISt17_Rb_tree_iteratorIS8_EbEOT_ called 75 returned 100% blocks executed 65%
       75: 2145:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2146:#if __cplusplus >= 201103L
        -: 2147:    _M_insert_unique(_Arg&& __v)
        -: 2148:#else
        -: 2149:    _M_insert_unique(const _Val& __v)
        -: 2150:#endif
        -: 2151:    {
        -: 2152:      typedef pair<iterator, bool> _Res;
        -: 2153:      pair<_Base_ptr, _Base_ptr> __res
       75: 2154:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
       75: 2154-block  0
call    0 returned 75
call    1 returned 75
branch  2 taken 75 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2154-block  1
        -: 2155:
       75: 2156:      if (__res.second)
       75: 2156-block  0
branch  0 taken 75 (fallthrough)
branch  1 taken 0
        -: 2157:	{
       75: 2158:	  _Alloc_node __an(*this);
       75: 2158-block  0
call    0 returned 75
       75: 2159:	  return _Res(_M_insert_(__res.first, __res.second,
call    0 returned 75
call    1 returned 75
branch  2 taken 75 (fallthrough)
branch  3 taken 0 (throw)
       75: 2159-block  0
call    4 returned 75
    $$$$$: 2159-block  1
        -: 2160:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
       75: 2161:		      true);
        -: 2162:	}
        -: 2163:
    #####: 2164:      return _Res(iterator(__res.first), false);
    %%%%%: 2164-block  0
call    0 never executed
call    1 never executed
        -: 2165:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueIRKiEESt4pairISt17_Rb_tree_iteratorIiEbEOT_ called 208 returned 100% blocks executed 82%
      208: 2145:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2146:#if __cplusplus >= 201103L
        -: 2147:    _M_insert_unique(_Arg&& __v)
        -: 2148:#else
        -: 2149:    _M_insert_unique(const _Val& __v)
        -: 2150:#endif
        -: 2151:    {
        -: 2152:      typedef pair<iterator, bool> _Res;
        -: 2153:      pair<_Base_ptr, _Base_ptr> __res
      208: 2154:	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
      208: 2154-block  0
call    0 returned 208
call    1 returned 208
branch  2 taken 208 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2154-block  1
        -: 2155:
      208: 2156:      if (__res.second)
      208: 2156-block  0
branch  0 taken 200 (fallthrough)
branch  1 taken 8
        -: 2157:	{
      200: 2158:	  _Alloc_node __an(*this);
      200: 2158-block  0
call    0 returned 200
      200: 2159:	  return _Res(_M_insert_(__res.first, __res.second,
call    0 returned 200
call    1 returned 200
branch  2 taken 200 (fallthrough)
branch  3 taken 0 (throw)
      200: 2159-block  0
call    4 returned 200
    $$$$$: 2159-block  1
        -: 2160:				 _GLIBCXX_FORWARD(_Arg, __v), __an),
      200: 2161:		      true);
        -: 2162:	}
        -: 2163:
        8: 2164:      return _Res(iterator(__res.first), false);
        8: 2164-block  0
call    0 returned 8
call    1 returned 8
        -: 2165:    }
------------------
        -: 2166:
        -: 2167:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2168:	   typename _Compare, typename _Alloc>
        -: 2169:#if __cplusplus >= 201103L
        -: 2170:    template<typename _Arg>
        -: 2171:#endif
        -: 2172:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE15_M_insert_equalIS3_EESt17_Rb_tree_iteratorIS3_EOT_ called 562 returned 100% blocks executed 90%
      562: 2173:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2174:#if __cplusplus >= 201103L
        -: 2175:    _M_insert_equal(_Arg&& __v)
        -: 2176:#else
        -: 2177:    _M_insert_equal(const _Val& __v)
        -: 2178:#endif
        -: 2179:    {
        -: 2180:      pair<_Base_ptr, _Base_ptr> __res
      562: 2181:	= _M_get_insert_equal_pos(_KeyOfValue()(__v));
      562: 2181-block  0
call    0 returned 562
call    1 returned 562
branch  2 taken 562 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2181-block  1
      562: 2182:      _Alloc_node __an(*this);
      562: 2182-block  0
call    0 returned 562
      562: 2183:      return _M_insert_(__res.first, __res.second,
call    0 returned 562
call    1 returned 562
branch  2 taken 562 (fallthrough)
branch  3 taken 0 (throw)
     1124: 2184:			_GLIBCXX_FORWARD(_Arg, __v), __an);
      562: 2184-block  0
      562: 2184-block  1
        -: 2185:    }
        -: 2186:
        -: 2187:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2188:	   typename _Compare, typename _Alloc>
        -: 2189:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2190:			   _Compare, _Alloc>::_Base_ptr,
        -: 2191:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2192:			   _Compare, _Alloc>::_Base_ptr>
      39*: 2193:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2194:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2195:				  const key_type& __k)
        -: 2196:    {
      39*: 2197:      iterator __pos = __position._M_const_cast();
        -: 2198:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2199:
        -: 2200:      // end()
      39*: 2201:      if (__pos._M_node == _M_end())
        -: 2202:	{
      39*: 2203:	  if (size() > 0
      39*: 2204:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
    #####: 2205:	    return _Res(0, _M_rightmost());
        -: 2206:	  else
      39*: 2207:	    return _M_get_insert_unique_pos(__k);
        -: 2208:	}
    #####: 2209:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
        -: 2210:	{
        -: 2211:	  // First, try before...
    #####: 2212:	  iterator __before = __pos;
    #####: 2213:	  if (__pos._M_node == _M_leftmost()) // begin()
    #####: 2214:	    return _Res(_M_leftmost(), _M_leftmost());
    #####: 2215:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
        -: 2216:	    {
    #####: 2217:	      if (_S_right(__before._M_node) == 0)
    #####: 2218:		return _Res(0, __before._M_node);
        -: 2219:	      else
    #####: 2220:		return _Res(__pos._M_node, __pos._M_node);
        -: 2221:	    }
        -: 2222:	  else
    #####: 2223:	    return _M_get_insert_unique_pos(__k);
        -: 2224:	}
    #####: 2225:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
        -: 2226:	{
        -: 2227:	  // ... then try after.
    #####: 2228:	  iterator __after = __pos;
    #####: 2229:	  if (__pos._M_node == _M_rightmost())
    #####: 2230:	    return _Res(0, _M_rightmost());
    #####: 2231:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
        -: 2232:	    {
    #####: 2233:	      if (_S_right(__pos._M_node) == 0)
    #####: 2234:		return _Res(0, __pos._M_node);
        -: 2235:	      else
    #####: 2236:		return _Res(__after._M_node, __after._M_node);
        -: 2237:	    }
        -: 2238:	  else
    #####: 2239:	    return _M_get_insert_unique_pos(__k);
        -: 2240:	}
        -: 2241:      else
        -: 2242:	// Equivalent keys.
    #####: 2243:	return _Res(__pos._M_node, 0);
        -: 2244:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIiERKi:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIiERKi called 39 returned 100% blocks executed 24%
       39: 2193:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2194:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2195:				  const key_type& __k)
        -: 2196:    {
       39: 2197:      iterator __pos = __position._M_const_cast();
       39: 2197-block  0
call    0 returned 39
        -: 2198:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2199:
        -: 2200:      // end()
       39: 2201:      if (__pos._M_node == _M_end())
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0
        -: 2202:	{
       39: 2203:	  if (size() > 0
       39: 2203-block  0
call    0 returned 39
      39*: 2204:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
branch  0 taken 14 (fallthrough)
branch  1 taken 25
       14: 2204-block  0
call    2 returned 14
call    3 returned 14
branch  4 taken 14 (fallthrough)
branch  5 taken 0 (throw)
       14: 2204-block  1
call    6 returned 14
branch  7 taken 0 (fallthrough)
branch  8 taken 14
    %%%%%: 2204-block  2
       39: 2204-block  3
       39: 2204-block  4
branch  9 taken 0 (fallthrough)
branch 10 taken 39
    #####: 2205:	    return _Res(0, _M_rightmost());
    %%%%%: 2205-block  0
call    0 never executed
call    1 never executed
        -: 2206:	  else
       39: 2207:	    return _M_get_insert_unique_pos(__k);
       39: 2207-block  0
call    0 returned 39
branch  1 taken 39 (fallthrough)
branch  2 taken 0 (throw)
       39: 2207-block  1
        -: 2208:	}
    #####: 2209:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
    %%%%%: 2209-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2209-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2210:	{
        -: 2211:	  // First, try before...
    #####: 2212:	  iterator __before = __pos;
    #####: 2213:	  if (__pos._M_node == _M_leftmost()) // begin()
    %%%%%: 2213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2214:	    return _Res(_M_leftmost(), _M_leftmost());
    %%%%%: 2214-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2215:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
    %%%%%: 2215-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2215-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2216:	    {
    #####: 2217:	      if (_S_right(__before._M_node) == 0)
    %%%%%: 2217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2218:		return _Res(0, __before._M_node);
    %%%%%: 2218-block  0
call    0 never executed
        -: 2219:	      else
    #####: 2220:		return _Res(__pos._M_node, __pos._M_node);
    %%%%%: 2220-block  0
call    0 never executed
        -: 2221:	    }
        -: 2222:	  else
    #####: 2223:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2223-block  1
        -: 2224:	}
    #####: 2225:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2225-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2226:	{
        -: 2227:	  // ... then try after.
    #####: 2228:	  iterator __after = __pos;
    #####: 2229:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2230:	    return _Res(0, _M_rightmost());
    %%%%%: 2230-block  0
call    0 never executed
call    1 never executed
    #####: 2231:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    %%%%%: 2231-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2231-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2232:	    {
    #####: 2233:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2234:		return _Res(0, __pos._M_node);
    %%%%%: 2234-block  0
call    0 never executed
        -: 2235:	      else
    #####: 2236:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2236-block  0
call    0 never executed
        -: 2237:	    }
        -: 2238:	  else
    #####: 2239:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2239-block  1
        -: 2240:	}
        -: 2241:      else
        -: 2242:	// Equivalent keys.
    #####: 2243:	return _Res(__pos._M_node, 0);
    %%%%%: 2243-block  0
call    0 never executed
        -: 2244:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_ called 0 returned 0% blocks executed 0%
    #####: 2193:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2194:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2195:				  const key_type& __k)
        -: 2196:    {
    #####: 2197:      iterator __pos = __position._M_const_cast();
    %%%%%: 2197-block  0
call    0 never executed
        -: 2198:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2199:
        -: 2200:      // end()
    #####: 2201:      if (__pos._M_node == _M_end())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2202:	{
    #####: 2203:	  if (size() > 0
    %%%%%: 2203-block  0
call    0 never executed
    #####: 2204:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
branch  0 never executed
branch  1 never executed
    %%%%%: 2204-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2204-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2204-block  2
    %%%%%: 2204-block  3
    %%%%%: 2204-block  4
branch  9 never executed
branch 10 never executed
    #####: 2205:	    return _Res(0, _M_rightmost());
    %%%%%: 2205-block  0
call    0 never executed
call    1 never executed
        -: 2206:	  else
    #####: 2207:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2207-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2207-block  1
        -: 2208:	}
    #####: 2209:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
    %%%%%: 2209-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2209-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2210:	{
        -: 2211:	  // First, try before...
    #####: 2212:	  iterator __before = __pos;
    #####: 2213:	  if (__pos._M_node == _M_leftmost()) // begin()
    %%%%%: 2213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2214:	    return _Res(_M_leftmost(), _M_leftmost());
    %%%%%: 2214-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2215:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
    %%%%%: 2215-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2215-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2216:	    {
    #####: 2217:	      if (_S_right(__before._M_node) == 0)
    %%%%%: 2217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2218:		return _Res(0, __before._M_node);
    %%%%%: 2218-block  0
call    0 never executed
        -: 2219:	      else
    #####: 2220:		return _Res(__pos._M_node, __pos._M_node);
    %%%%%: 2220-block  0
call    0 never executed
        -: 2221:	    }
        -: 2222:	  else
    #####: 2223:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2223-block  1
        -: 2224:	}
    #####: 2225:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2225-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2226:	{
        -: 2227:	  // ... then try after.
    #####: 2228:	  iterator __after = __pos;
    #####: 2229:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2230:	    return _Res(0, _M_rightmost());
    %%%%%: 2230-block  0
call    0 never executed
call    1 never executed
    #####: 2231:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    %%%%%: 2231-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2231-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2232:	    {
    #####: 2233:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2234:		return _Res(0, __pos._M_node);
    %%%%%: 2234-block  0
call    0 never executed
        -: 2235:	      else
    #####: 2236:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2236-block  0
call    0 never executed
        -: 2237:	    }
        -: 2238:	  else
    #####: 2239:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2239-block  1
        -: 2240:	}
        -: 2241:      else
        -: 2242:	// Equivalent keys.
    #####: 2243:	return _Res(__pos._M_node, 0);
    %%%%%: 2243-block  0
call    0 never executed
        -: 2244:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS6_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS6_ called 0 returned 0% blocks executed 0%
    #####: 2193:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2194:    _M_get_insert_hint_unique_pos(const_iterator __position,
        -: 2195:				  const key_type& __k)
        -: 2196:    {
    #####: 2197:      iterator __pos = __position._M_const_cast();
    %%%%%: 2197-block  0
call    0 never executed
        -: 2198:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2199:
        -: 2200:      // end()
    #####: 2201:      if (__pos._M_node == _M_end())
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2202:	{
    #####: 2203:	  if (size() > 0
    %%%%%: 2203-block  0
call    0 never executed
    #####: 2204:	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
branch  0 never executed
branch  1 never executed
    %%%%%: 2204-block  0
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2204-block  1
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%: 2204-block  2
branch  9 never executed
branch 10 never executed
    %%%%%: 2204-block  3
    %%%%%: 2204-block  4
    %%%%%: 2204-block  5
branch 11 never executed
branch 12 never executed
    #####: 2205:	    return _Res(0, _M_rightmost());
    %%%%%: 2205-block  0
call    0 never executed
call    1 never executed
        -: 2206:	  else
    #####: 2207:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2207-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2207-block  1
        -: 2208:	}
    #####: 2209:      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
    %%%%%: 2209-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2209-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2209-block  2
branch  6 never executed
branch  7 never executed
        -: 2210:	{
        -: 2211:	  // First, try before...
    #####: 2212:	  iterator __before = __pos;
    #####: 2213:	  if (__pos._M_node == _M_leftmost()) // begin()
    %%%%%: 2213-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2214:	    return _Res(_M_leftmost(), _M_leftmost());
    %%%%%: 2214-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2215:	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
    %%%%%: 2215-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2215-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2215-block  2
branch  7 never executed
branch  8 never executed
        -: 2216:	    {
    #####: 2217:	      if (_S_right(__before._M_node) == 0)
    %%%%%: 2217-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2218:		return _Res(0, __before._M_node);
    %%%%%: 2218-block  0
call    0 never executed
        -: 2219:	      else
    #####: 2220:		return _Res(__pos._M_node, __pos._M_node);
    %%%%%: 2220-block  0
call    0 never executed
        -: 2221:	    }
        -: 2222:	  else
    #####: 2223:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2223-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2223-block  1
        -: 2224:	}
    #####: 2225:      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2225-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2225-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%: 2225-block  2
branch  6 never executed
branch  7 never executed
        -: 2226:	{
        -: 2227:	  // ... then try after.
    #####: 2228:	  iterator __after = __pos;
    #####: 2229:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2229-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2230:	    return _Res(0, _M_rightmost());
    %%%%%: 2230-block  0
call    0 never executed
call    1 never executed
    #####: 2231:	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
    %%%%%: 2231-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2231-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2231-block  2
branch  7 never executed
branch  8 never executed
        -: 2232:	    {
    #####: 2233:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2233-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2234:		return _Res(0, __pos._M_node);
    %%%%%: 2234-block  0
call    0 never executed
        -: 2235:	      else
    #####: 2236:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2236-block  0
call    0 never executed
        -: 2237:	    }
        -: 2238:	  else
    #####: 2239:	    return _M_get_insert_unique_pos(__k);
    %%%%%: 2239-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2239-block  1
        -: 2240:	}
        -: 2241:      else
        -: 2242:	// Equivalent keys.
    #####: 2243:	return _Res(__pos._M_node, 0);
    %%%%%: 2243-block  0
call    0 never executed
        -: 2244:    }
------------------
        -: 2245:
        -: 2246:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2247:	   typename _Compare, typename _Alloc>
        -: 2248:#if __cplusplus >= 201103L
        -: 2249:    template<typename _Arg, typename _NodeGen>
        -: 2250:#else
        -: 2251:    template<typename _NodeGen>
        -: 2252:#endif
        -: 2253:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
       39: 2254:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2255:      _M_insert_unique_(const_iterator __position,
        -: 2256:#if __cplusplus >= 201103L
        -: 2257:			_Arg&& __v,
        -: 2258:#else
        -: 2259:			const _Val& __v,
        -: 2260:#endif
        -: 2261:			_NodeGen& __node_gen)
        -: 2262:    {
        -: 2263:      pair<_Base_ptr, _Base_ptr> __res
       39: 2264:	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
        -: 2265:
       39: 2266:      if (__res.second)
       39: 2267:	return _M_insert_(__res.first, __res.second,
        -: 2268:			  _GLIBCXX_FORWARD(_Arg, __v),
       39: 2269:			  __node_gen);
    #####: 2270:      return iterator(__res.first);
        -: 2271:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_insert_unique_IRKiNS5_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIiESt23_Rb_tree_const_iteratorIiEOT_RT0_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_insert_unique_IRKiNS5_20_Reuse_or_alloc_nodeEEESt17_Rb_tree_iteratorIiESt23_Rb_tree_const_iteratorIiEOT_RT0_ called 11 returned 100% blocks executed 75%
       11: 2254:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2255:      _M_insert_unique_(const_iterator __position,
        -: 2256:#if __cplusplus >= 201103L
        -: 2257:			_Arg&& __v,
        -: 2258:#else
        -: 2259:			const _Val& __v,
        -: 2260:#endif
        -: 2261:			_NodeGen& __node_gen)
        -: 2262:    {
        -: 2263:      pair<_Base_ptr, _Base_ptr> __res
       11: 2264:	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
       11: 2264-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2264-block  1
        -: 2265:
       11: 2266:      if (__res.second)
       11: 2266-block  0
branch  0 taken 11 (fallthrough)
branch  1 taken 0
       11: 2267:	return _M_insert_(__res.first, __res.second,
       11: 2267-block  0
call    0 returned 11
call    1 returned 11
branch  2 taken 11 (fallthrough)
branch  3 taken 0 (throw)
        -: 2268:			  _GLIBCXX_FORWARD(_Arg, __v),
       11: 2269:			  __node_gen);
       11: 2269-block  0
    #####: 2270:      return iterator(__res.first);
    %%%%%: 2270-block  0
call    0 never executed
        -: 2271:    }
------------------
_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_insert_unique_IRKiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiESt23_Rb_tree_const_iteratorIiEOT_RT0_:
function _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE17_M_insert_unique_IRKiNS5_11_Alloc_nodeEEESt17_Rb_tree_iteratorIiESt23_Rb_tree_const_iteratorIiEOT_RT0_ called 28 returned 100% blocks executed 75%
       28: 2254:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2255:      _M_insert_unique_(const_iterator __position,
        -: 2256:#if __cplusplus >= 201103L
        -: 2257:			_Arg&& __v,
        -: 2258:#else
        -: 2259:			const _Val& __v,
        -: 2260:#endif
        -: 2261:			_NodeGen& __node_gen)
        -: 2262:    {
        -: 2263:      pair<_Base_ptr, _Base_ptr> __res
       28: 2264:	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
       28: 2264-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2264-block  1
        -: 2265:
       28: 2266:      if (__res.second)
       28: 2266-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 0
       28: 2267:	return _M_insert_(__res.first, __res.second,
       28: 2267-block  0
call    0 returned 28
call    1 returned 28
branch  2 taken 28 (fallthrough)
branch  3 taken 0 (throw)
        -: 2268:			  _GLIBCXX_FORWARD(_Arg, __v),
       28: 2269:			  __node_gen);
       28: 2269-block  0
    #####: 2270:      return iterator(__res.first);
    %%%%%: 2270-block  0
call    0 never executed
        -: 2271:    }
------------------
        -: 2272:
        -: 2273:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2274:	   typename _Compare, typename _Alloc>
        -: 2275:    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2276:			   _Compare, _Alloc>::_Base_ptr,
        -: 2277:	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2278:			   _Compare, _Alloc>::_Base_ptr>
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE28_M_get_insert_hint_equal_posESt23_Rb_tree_const_iteratorIS3_ERS1_ called 346 returned 100% blocks executed 32%
      346: 2279:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2280:    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
        -: 2281:    {
      346: 2282:      iterator __pos = __position._M_const_cast();
      346: 2282-block  0
call    0 returned 346
        -: 2283:      typedef pair<_Base_ptr, _Base_ptr> _Res;
        -: 2284:
        -: 2285:      // end()
      346: 2286:      if (__pos._M_node == _M_end())
call    0 returned 346
branch  1 taken 346 (fallthrough)
branch  2 taken 0
        -: 2287:	{
      346: 2288:	  if (size() > 0
      346: 2288-block  0
call    0 returned 346
      346: 2289:	      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
branch  0 taken 346 (fallthrough)
branch  1 taken 0
      346: 2289-block  0
call    2 returned 346
call    3 returned 346
branch  4 taken 346 (fallthrough)
branch  5 taken 0 (throw)
      346: 2289-block  1
call    6 returned 346
branch  7 taken 261 (fallthrough)
branch  8 taken 85
      261: 2289-block  2
       85: 2289-block  3
      346: 2289-block  4
branch  9 taken 261 (fallthrough)
branch 10 taken 85
      261: 2290:	    return _Res(0, _M_rightmost());
      261: 2290-block  0
call    0 returned 261
call    1 returned 261
        -: 2291:	  else
       85: 2292:	    return _M_get_insert_equal_pos(__k);
       85: 2292-block  0
call    0 returned 85
branch  1 taken 85 (fallthrough)
branch  2 taken 0 (throw)
       85: 2292-block  1
        -: 2293:	}
    #####: 2294:      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
    %%%%%: 2294-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2294-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2295:	{
        -: 2296:	  // First, try before...
    #####: 2297:	  iterator __before = __pos;
    #####: 2298:	  if (__pos._M_node == _M_leftmost()) // begin()
    %%%%%: 2298-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2299:	    return _Res(_M_leftmost(), _M_leftmost());
    %%%%%: 2299-block  0
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2300:	  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
    %%%%%: 2300-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2300-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2301:	    {
    #####: 2302:	      if (_S_right(__before._M_node) == 0)
    %%%%%: 2302-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2303:		return _Res(0, __before._M_node);
    %%%%%: 2303-block  0
call    0 never executed
        -: 2304:	      else
    #####: 2305:		return _Res(__pos._M_node, __pos._M_node);
    %%%%%: 2305-block  0
call    0 never executed
        -: 2306:	    }
        -: 2307:	  else
    #####: 2308:	    return _M_get_insert_equal_pos(__k);
    %%%%%: 2308-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2308-block  1
        -: 2309:	}
        -: 2310:      else
        -: 2311:	{
        -: 2312:	  // ... then try after.
    #####: 2313:	  iterator __after = __pos;
    #####: 2314:	  if (__pos._M_node == _M_rightmost())
    %%%%%: 2314-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2315:	    return _Res(0, _M_rightmost());
    %%%%%: 2315-block  0
call    0 never executed
call    1 never executed
    #####: 2316:	  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
    %%%%%: 2316-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2316-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
        -: 2317:	    {
    #####: 2318:	      if (_S_right(__pos._M_node) == 0)
    %%%%%: 2318-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2319:		return _Res(0, __pos._M_node);
    %%%%%: 2319-block  0
call    0 never executed
        -: 2320:	      else
    #####: 2321:		return _Res(__after._M_node, __after._M_node);
    %%%%%: 2321-block  0
call    0 never executed
        -: 2322:	    }
        -: 2323:	  else
    #####: 2324:	    return _Res(0, 0);
    %%%%%: 2324-block  0
call    0 never executed
        -: 2325:	}
        -: 2326:    }
        -: 2327:
        -: 2328:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2329:	   typename _Compare, typename _Alloc>
        -: 2330:#if __cplusplus >= 201103L
        -: 2331:    template<typename _Arg, typename _NodeGen>
        -: 2332:#else
        -: 2333:    template<typename _NodeGen>
        -: 2334:#endif
        -: 2335:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE16_M_insert_equal_IRS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_ called 346 returned 100% blocks executed 69%
      346: 2336:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2337:      _M_insert_equal_(const_iterator __position,
        -: 2338:#if __cplusplus >= 201103L
        -: 2339:		       _Arg&& __v,
        -: 2340:#else
        -: 2341:		       const _Val& __v,
        -: 2342:#endif
        -: 2343:		       _NodeGen& __node_gen)
        -: 2344:      {
        -: 2345:	pair<_Base_ptr, _Base_ptr> __res
      346: 2346:	  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));
      346: 2346-block  0
call    0 returned 346
call    1 returned 346
branch  2 taken 346 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$: 2346-block  1
        -: 2347:
      346: 2348:	if (__res.second)
      346: 2348-block  0
branch  0 taken 346 (fallthrough)
branch  1 taken 0
      346: 2349:	  return _M_insert_(__res.first, __res.second,
      346: 2349-block  0
call    0 returned 346
call    1 returned 346
branch  2 taken 346 (fallthrough)
branch  3 taken 0 (throw)
        -: 2350:			    _GLIBCXX_FORWARD(_Arg, __v),
      346: 2351:			    __node_gen);
      346: 2351-block  0
        -: 2352:
    #####: 2353:	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
    %%%%%: 2353-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%: 2353-block  1
        -: 2354:      }
        -: 2355:
        -: 2356:#if __cplusplus >= 201103L
        -: 2357:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2358:	   typename _Compare, typename _Alloc>
        -: 2359:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
     168*: 2360:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2361:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2362:    {
     168*: 2363:      bool __insert_left = (__x != 0 || __p == _M_end()
     336*: 2364:			    || _M_impl._M_key_compare(_S_key(__z),
        -: 2365:						      _S_key(__p)));
        -: 2366:
     168*: 2367:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
     168*: 2368:				    this->_M_impl._M_header);
     168*: 2369:      ++_M_impl._M_node_count;
     168*: 2370:      return iterator(__z);
        -: 2371:    }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E called 0 returned 0% blocks executed 0%
    #####: 2360:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2361:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2362:    {
    #####: 2363:      bool __insert_left = (__x != 0 || __p == _M_end()
    %%%%%: 2363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2364:			    || _M_impl._M_key_compare(_S_key(__z),
    %%%%%: 2364-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2364-block  1
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2364-block  2
    %%%%%: 2364-block  3
        -: 2365:						      _S_key(__p)));
        -: 2366:
    #####: 2367:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    #####: 2368:				    this->_M_impl._M_header);
    %%%%%: 2368-block  0
call    0 never executed
    #####: 2369:      ++_M_impl._M_node_count;
    #####: 2370:      return iterator(__z);
call    0 never executed
        -: 2371:    }
------------------
_ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E:
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E called 168 returned 100% blocks executed 100%
      168: 2360:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2361:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2362:    {
      168: 2363:      bool __insert_left = (__x != 0 || __p == _M_end()
      168: 2363-block  0
call    0 returned 168
branch  1 taken 73 (fallthrough)
branch  2 taken 95
      336: 2364:			    || _M_impl._M_key_compare(_S_key(__z),
      168: 2364-block  0
branch  0 taken 168 (fallthrough)
branch  1 taken 0
       73: 2364-block  1
call    2 returned 73
call    3 returned 73
call    4 returned 73
branch  5 taken 0 (fallthrough)
branch  6 taken 73
       95: 2364-block  2
       73: 2364-block  3
        -: 2365:						      _S_key(__p)));
        -: 2366:
      168: 2367:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
      168: 2368:				    this->_M_impl._M_header);
      168: 2368-block  0
call    0 returned 168
      168: 2369:      ++_M_impl._M_node_count;
      168: 2370:      return iterator(__z);
call    0 returned 168
        -: 2371:    }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS8_E:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSF_PSt13_Rb_tree_nodeIS8_E called 0 returned 0% blocks executed 0%
    #####: 2360:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2361:    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
        -: 2362:    {
    #####: 2363:      bool __insert_left = (__x != 0 || __p == _M_end()
    %%%%%: 2363-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2364:			    || _M_impl._M_key_compare(_S_key(__z),
    %%%%%: 2364-block  0
branch  0 never executed
branch  1 never executed
    %%%%%: 2364-block  1
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%: 2364-block  2
    %%%%%: 2364-block  3
        -: 2365:						      _S_key(__p)));
        -: 2366:
    #####: 2367:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
    #####: 2368:				    this->_M_impl._M_header);
    %%%%%: 2368-block  0
call    0 never executed
    #####: 2369:      ++_M_impl._M_node_count;
    #####: 2370:      return iterator(__z);
call    0 never executed
        -: 2371:    }
------------------
        -: 2372:
        -: 2373:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2374:	   typename _Compare, typename _Alloc>
        -: 2375:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2376:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2377:    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
        -: 2378:    {
        -: 2379:      bool __insert_left = (__p == _M_end()
        -: 2380:			    || !_M_impl._M_key_compare(_S_key(__p),
        -: 2381:						       _S_key(__z)));
        -: 2382:
        -: 2383:      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        -: 2384:				    this->_M_impl._M_header);
        -: 2385:      ++_M_impl._M_node_count;
        -: 2386:      return iterator(__z);
        -: 2387:    }
        -: 2388:
        -: 2389:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2390:	   typename _Compare, typename _Alloc>
        -: 2391:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2392:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2393:    _M_insert_equal_lower_node(_Link_type __z)
        -: 2394:    {
        -: 2395:      _Link_type __x = _M_begin();
        -: 2396:      _Base_ptr __y = _M_end();
        -: 2397:      while (__x != 0)
        -: 2398:	{
        -: 2399:	  __y = __x;
        -: 2400:	  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
        -: 2401:		_S_left(__x) : _S_right(__x);
        -: 2402:	}
        -: 2403:      return _M_insert_lower_node(__y, __z);
        -: 2404:    }
        -: 2405:
        -: 2406:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2407:	   typename _Compare, typename _Alloc>
        -: 2408:    template<typename... _Args>
        -: 2409:      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2410:			     _Compare, _Alloc>::iterator, bool>
        -: 2411:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2412:      _M_emplace_unique(_Args&&... __args)
        -: 2413:      {
        -: 2414:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2415:
        -: 2416:	__try
        -: 2417:	  {
        -: 2418:	    typedef pair<iterator, bool> _Res;
        -: 2419:	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
        -: 2420:	    if (__res.second)
        -: 2421:	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
        -: 2422:	
        -: 2423:	    _M_drop_node(__z);
        -: 2424:	    return _Res(iterator(__res.first), false);
        -: 2425:	  }
        -: 2426:	__catch(...)
        -: 2427:	  {
        -: 2428:	    _M_drop_node(__z);
        -: 2429:	    __throw_exception_again;
        -: 2430:	  }
        -: 2431:      }
        -: 2432:
        -: 2433:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2434:	   typename _Compare, typename _Alloc>
        -: 2435:    template<typename... _Args>
        -: 2436:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE16_M_emplace_equalIJS0_IiS2_EEEESt17_Rb_tree_iteratorIS3_EDpOT_ called 168 returned 100% blocks executed 60%
      168: 2437:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2438:      _M_emplace_equal(_Args&&... __args)
        -: 2439:      {
      168: 2440:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
      168: 2440-block  0
call    0 returned 168
call    1 returned 168
        -: 2441:
        -: 2442:	__try
        -: 2443:	  {
      168: 2444:	    auto __res = _M_get_insert_equal_pos(_S_key(__z));
call    0 returned 168
branch  1 taken 168 (fallthrough)
branch  2 taken 0 (throw)
      168: 2444-block  0
call    3 returned 168
branch  4 taken 168 (fallthrough)
branch  5 taken 0 (throw)
      336: 2445:	    return _M_insert_node(__res.first, __res.second, __z);
      168: 2445-block  0
call    0 returned 168
branch  1 taken 168 (fallthrough)
branch  2 taken 0 (throw)
      168: 2445-block  1
      168: 2445-block  2
        -: 2446:	  }
    =====: 2447:	__catch(...)
    $$$$$: 2447-block  0
    $$$$$: 2447-block  1
call    0 never executed
    $$$$$: 2447-block  2
call    1 never executed
        -: 2448:	  {
    =====: 2449:	    _M_drop_node(__z);
call    0 never executed
    =====: 2450:	    __throw_exception_again;
call    0 never executed
        -: 2451:	  }
        -: 2452:      }
        -: 2453:
        -: 2454:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2455:	   typename _Compare, typename _Alloc>
        -: 2456:    template<typename... _Args>
        -: 2457:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    #####: 2458:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2459:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2460:      {
    #####: 2461:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2462:
        -: 2463:	__try
        -: 2464:	  {
    #####: 2465:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
        -: 2466:
    #####: 2467:	    if (__res.second)
    #####: 2468:	      return _M_insert_node(__res.first, __res.second, __z);
        -: 2469:
    #####: 2470:	    _M_drop_node(__z);
    #####: 2471:	    return iterator(__res.first);
        -: 2472:	  }
    =====: 2473:	__catch(...)
        -: 2474:	  {
    =====: 2475:	    _M_drop_node(__z);
    =====: 2476:	    __throw_exception_again;
        -: 2477:	  }
        -: 2478:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOcEESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####: 2458:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2459:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2460:      {
    #####: 2461:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
    %%%%%: 2461-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2462:
        -: 2463:	__try
        -: 2464:	  {
    #####: 2465:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2465-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2466:
    #####: 2467:	    if (__res.second)
    %%%%%: 2467-block  0
branch  0 never executed
branch  1 never executed
    #####: 2468:	      return _M_insert_node(__res.first, __res.second, __z);
    %%%%%: 2468-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2468-block  1
        -: 2469:
    #####: 2470:	    _M_drop_node(__z);
    %%%%%: 2470-block  0
call    0 never executed
    #####: 2471:	    return iterator(__res.first);
call    0 never executed
        -: 2472:	  }
    =====: 2473:	__catch(...)
    $$$$$: 2473-block  0
    $$$$$: 2473-block  1
call    0 never executed
    $$$$$: 2473-block  2
call    1 never executed
        -: 2474:	  {
    =====: 2475:	    _M_drop_node(__z);
call    0 never executed
    =====: 2476:	    __throw_exception_again;
call    0 never executed
        -: 2477:	  }
        -: 2478:      }
------------------
_ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_:
function _ZNSt8_Rb_treeIcSt4pairIKcbESt10_Select1stIS2_ESt4lessIcESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_ called 0 returned 0% blocks executed 0%
    #####: 2458:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2459:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2460:      {
    #####: 2461:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
    %%%%%: 2461-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2462:
        -: 2463:	__try
        -: 2464:	  {
    #####: 2465:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2465-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2466:
    #####: 2467:	    if (__res.second)
    %%%%%: 2467-block  0
branch  0 never executed
branch  1 never executed
    #####: 2468:	      return _M_insert_node(__res.first, __res.second, __z);
    %%%%%: 2468-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2468-block  1
        -: 2469:
    #####: 2470:	    _M_drop_node(__z);
    %%%%%: 2470-block  0
call    0 never executed
    #####: 2471:	    return iterator(__res.first);
call    0 never executed
        -: 2472:	  }
    =====: 2473:	__catch(...)
    $$$$$: 2473-block  0
    $$$$$: 2473-block  1
call    0 never executed
    $$$$$: 2473-block  2
call    1 never executed
        -: 2474:	  {
    =====: 2475:	    _M_drop_node(__z);
call    0 never executed
    =====: 2476:	    __throw_exception_again;
call    0 never executed
        -: 2477:	  }
        -: 2478:      }
------------------
_ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_:
function _ZNSt8_Rb_treeISt3setIiSt4lessIiESaIiEESt4pairIKS4_S5_IibEESt10_Select1stIS8_ES1_IS4_ESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS6_EESI_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_ called 0 returned 0% blocks executed 0%
    #####: 2458:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2459:      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
        -: 2460:      {
    #####: 2461:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
    %%%%%: 2461-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
        -: 2462:
        -: 2463:	__try
        -: 2464:	  {
    #####: 2465:	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2465-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 2466:
    #####: 2467:	    if (__res.second)
    %%%%%: 2467-block  0
branch  0 never executed
branch  1 never executed
    #####: 2468:	      return _M_insert_node(__res.first, __res.second, __z);
    %%%%%: 2468-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%: 2468-block  1
        -: 2469:
    #####: 2470:	    _M_drop_node(__z);
    %%%%%: 2470-block  0
call    0 never executed
    #####: 2471:	    return iterator(__res.first);
call    0 never executed
        -: 2472:	  }
    =====: 2473:	__catch(...)
    $$$$$: 2473-block  0
    $$$$$: 2473-block  1
call    0 never executed
    $$$$$: 2473-block  2
call    1 never executed
        -: 2474:	  {
    =====: 2475:	    _M_drop_node(__z);
call    0 never executed
    =====: 2476:	    __throw_exception_again;
call    0 never executed
        -: 2477:	  }
        -: 2478:      }
------------------
        -: 2479:
        -: 2480:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2481:	   typename _Compare, typename _Alloc>
        -: 2482:    template<typename... _Args>
        -: 2483:      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
        -: 2484:      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2485:      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
        -: 2486:      {
        -: 2487:	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
        -: 2488:
        -: 2489:	__try
        -: 2490:	  {
        -: 2491:	    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));
        -: 2492:
        -: 2493:	    if (__res.second)
        -: 2494:	      return _M_insert_node(__res.first, __res.second, __z);
        -: 2495:
        -: 2496:	    return _M_insert_equal_lower_node(__z);
        -: 2497:	  }
        -: 2498:	__catch(...)
        -: 2499:	  {
        -: 2500:	    _M_drop_node(__z);
        -: 2501:	    __throw_exception_again;
        -: 2502:	  }
        -: 2503:      }
        -: 2504:#endif
        -: 2505:
        -: 2506:
        -: 2507:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2508:	   typename _Compare, typename _Alloc>
        -: 2509:    void
function _ZNSt8_Rb_treeIiSt4pairIKiS0_IciEESt10_Select1stIS3_ESt4lessIiESaIS3_EE12_M_erase_auxESt23_Rb_tree_const_iteratorIS3_E called 197 returned 100% blocks executed 100%
      197: 2510:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2511:    _M_erase_aux(const_iterator __position)
        -: 2512:    {
        -: 2513:      _Link_type __y =
        -: 2514:	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
      197: 2515:				(const_cast<_Base_ptr>(__position._M_node),
      197: 2516:				 this->_M_impl._M_header));
      197: 2516-block  0
call    0 returned 197
      197: 2517:      _M_drop_node(__y);
call    0 returned 197
      197: 2518:      --_M_impl._M_node_count;
      197: 2519:    }
        -: 2520:
        -: 2521:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2522:	   typename _Compare, typename _Alloc>
        -: 2523:    void
        -: 2524:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2525:    _M_erase_aux(const_iterator __first, const_iterator __last)
        -: 2526:    {
        -: 2527:      if (__first == begin() && __last == end())
        -: 2528:	clear();
        -: 2529:      else
        -: 2530:	while (__first != __last)
        -: 2531:	  _M_erase_aux(__first++);
        -: 2532:    }
        -: 2533:
        -: 2534:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2535:	   typename _Compare, typename _Alloc>
        -: 2536:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
        -: 2537:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2538:    erase(const _Key& __x)
        -: 2539:    {
        -: 2540:      pair<iterator, iterator> __p = equal_range(__x);
        -: 2541:      const size_type __old_size = size();
        -: 2542:      _M_erase_aux(__p.first, __p.second);
        -: 2543:      return __old_size - size();
        -: 2544:    }
        -: 2545:
        -: 2546:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2547:	   typename _Compare, typename _Alloc>
        -: 2548:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2549:		      _Compare, _Alloc>::iterator
      667: 2550:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2551:    find(const _Key& __k)
        -: 2552:    {
      667: 2553:      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
     1334: 2554:      return (__j == end()
      500: 2555:	      || _M_impl._M_key_compare(__k,
     1834: 2556:					_S_key(__j._M_node))) ? end() : __j;
        -: 2557:    }
        -: 2558:
        -: 2559:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2560:	   typename _Compare, typename _Alloc>
        -: 2561:    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        -: 2562:		      _Compare, _Alloc>::const_iterator
        -: 2563:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2564:    find(const _Key& __k) const
        -: 2565:    {
        -: 2566:      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
        -: 2567:      return (__j == end()
        -: 2568:	      || _M_impl._M_key_compare(__k,
        -: 2569:					_S_key(__j._M_node))) ? end() : __j;
        -: 2570:    }
        -: 2571:
        -: 2572:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2573:	   typename _Compare, typename _Alloc>
        -: 2574:    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
        -: 2575:    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
        -: 2576:    count(const _Key& __k) const
        -: 2577:    {
        -: 2578:      pair<const_iterator, const_iterator> __p = equal_range(__k);
        -: 2579:      const size_type __n = std::distance(__p.first, __p.second);
        -: 2580:      return __n;
        -: 2581:    }
        -: 2582:
        -: 2583:  _GLIBCXX_PURE unsigned int
        -: 2584:  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
        -: 2585:		       const _Rb_tree_node_base* __root) throw ();
        -: 2586:
        -: 2587:  template<typename _Key, typename _Val, typename _KeyOfValue,
        -: 2588:	   typename _Compare, typename _Alloc>
        -: 2589:    bool
        -: 2590:    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
        -: 2591:    {
        -: 2592:      if (_M_impl._M_node_count == 0 || begin() == end())
        -: 2593:	return _M_impl._M_node_count == 0 && begin() == end()
        -: 2594:	       && this->_M_impl._M_header._M_left == _M_end()
        -: 2595:	       && this->_M_impl._M_header._M_right == _M_end();
        -: 2596:
        -: 2597:      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
        -: 2598:      for (const_iterator __it = begin(); __it != end(); ++__it)
        -: 2599:	{
        -: 2600:	  _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
        -: 2601:	  _Const_Link_type __L = _S_left(__x);
        -: 2602:	  _Const_Link_type __R = _S_right(__x);
        -: 2603:
        -: 2604:	  if (__x->_M_color == _S_red)
        -: 2605:	    if ((__L && __L->_M_color == _S_red)
        -: 2606:		|| (__R && __R->_M_color == _S_red))
        -: 2607:	      return false;
        -: 2608:
        -: 2609:	  if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
        -: 2610:	    return false;
        -: 2611:	  if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
        -: 2612:	    return false;
        -: 2613:
        -: 2614:	  if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
        -: 2615:	    return false;
        -: 2616:	}
        -: 2617:
        -: 2618:      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
        -: 2619:	return false;
        -: 2620:      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
        -: 2621:	return false;
        -: 2622:      return true;
        -: 2623:    }
        -: 2624:
        -: 2625:#if __cplusplus > 201402L
        -: 2626:  // Allow access to internals of compatible _Rb_tree specializations.
        -: 2627:  template<typename _Key, typename _Val, typename _Sel, typename _Cmp1,
        -: 2628:	   typename _Alloc, typename _Cmp2>
        -: 2629:    struct _Rb_tree_merge_helper<_Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>,
        -: 2630:				 _Cmp2>
        -: 2631:    {
        -: 2632:    private:
        -: 2633:      friend class _Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>;
        -: 2634:
        -: 2635:      static auto&
        -: 2636:      _S_get_impl(_Rb_tree<_Key, _Val, _Sel, _Cmp2, _Alloc>& __tree)
        -: 2637:      { return __tree._M_impl; }
        -: 2638:    };
        -: 2639:#endif // C++17
        -: 2640:
        -: 2641:_GLIBCXX_END_NAMESPACE_VERSION
        -: 2642:} // namespace
        -: 2643:
        -: 2644:#endif
